Index: src/main/java/viewModel/VM_Host.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package viewModel;\n\nimport javafx.application.Platform;\nimport javafx.beans.property.IntegerProperty;\nimport javafx.beans.property.SimpleIntegerProperty;\nimport model.data.Tile;\nimport model.data.Word;\nimport model.logic.BookScrabbleHandler;\nimport model.logic.Host;\nimport model.logic.MyServer;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Observable;\nimport java.util.Observer;\n\npublic class VM_Host extends Observable implements ViewModel, Observer {\n\n    Host host;\n\n    Tile[][] gameBoard;\n    Tile.Bag gameBag;\n\n    String ip, name;\n    ArrayList<Tile> currentTiles;\n    int port, players, playerTurn, myTurn;\n\n    private final IntegerProperty scoreProperty;\n    private final IntegerProperty playersProperty;\n\n    // constructor\n    public VM_Host(String n) throws IOException {\n\n        // init\n        name = n;\n        currentTiles = new ArrayList<>();\n        scoreProperty = new SimpleIntegerProperty();\n        playersProperty = new SimpleIntegerProperty();\n\n        // create main server\n        MyServer gameServer = new MyServer();\n        gameServer.initMyServer(1234, new BookScrabbleHandler());\n        gameServer.start();\n\n        // create Host and connect him to the main server\n        host = Host.getModel();\n        host.CreateSocketToServer(gameServer);\n        host.start();\n\n        // add observers\n        host.addObserver(this); // vm_host ( this ) observe Host\n        host.hostPlayer.addObserver(this); // vm_host ( this ) observe Guest\n\n        try { Thread.sleep(500); }\n        catch (InterruptedException e) { e.printStackTrace(); }\n\n        // get ip and port of the host server\n        ip = host.getIpAddress();\n        port = host.getPort();\n\n        // get the amount of players\n        playersProperty.set(host.GuestList.size());\n\n        // make turn for later to pass between players\n        playerTurn = 0;\n        myTurn = 0;\n\n        // set score to 0\n        scoreProperty.set(0);\n    }\n\n    // property\n    public IntegerProperty playersProperty() { return playersProperty; }\n    @Override\n    public IntegerProperty scoreProperty() { return scoreProperty; }\n\n    // game functions\n    @Override\n    public void startGame() {\n\n        // set the amount of players\n        players = playersProperty().getValue();\n        // send start message to each guest, each one get 8 tiles\n        host.SendStartGameMessage(host.getNickName());\n        try { Thread.sleep(1000); }\n        catch (InterruptedException e) { e.printStackTrace(); }\n        // get board and tiles bag\n        gameBoard = host.hostPlayer.player.getCurrentBoardAsTiles();\n        gameBag = Tile.Bag.getBagModel();\n        updateTiles();\n    }\n    @Override\n    public int tryPlaceWord(Word word) {\n\n        // get the current score\n        int score = scoreProperty.get();\n\n        // try place word func\n        host.hostPlayer.SendTryPlaceWordMessage(host.hostPlayer.NickName, host.NickName, word.toString(), word.getRow(), word.getCol(), word.isVertical());\n        try { Thread.sleep(2000); }\n        catch (InterruptedException e) { e.printStackTrace(); }\n\n        // set the new score\n        scoreProperty.set(host.hostPlayer.player.getCurrentScore());\n\n        // print for test\n        System.out.println(\"prev score: \" + score);\n        System.out.println(\"current score: \" + host.hostPlayer.player.getCurrentScore());\n\n        // if the currentScore - prevScore is 0, its mean the word received 0 points\n        if (score != 0) {\n            return scoreProperty.get() - score;\n        }\n        // if its this first turn send back the current score\n        else {\n            return scoreProperty.get();\n        }\n    }\n    @Override\n    public void placeTile(Tile selectedTile, int row, int col) {\n\n//        gameBoard.placeTile(selectedTile, row, col);\n    }\n    @Override\n    public void removeTile(int row, int column) {\n\n//        gameBoard.removeTile(row,column);\n    }\n    @Override\n    public void passTurn() {\n\n        host.hostPlayer.sendPassTurnMessage();\n    }\n    @Override\n    public void updateTiles() {\n\n        currentTiles.clear();\n        // get the player tiles and convert them from char to tile object\n        char[] tiles = host.hostPlayer.player.getCurrentTiles().toCharArray();\n        for (char tile: tiles) {\n            currentTiles.add(gameBag.getTileForTileArray(tile));\n        }\n    }\n    @Override\n    public void updateBoard() {\n\n//        host.hostPlayer.sendUpdateBoardMessage();\n\n//        gameBoard = Board.getBoard();\n//        setChanged();\n//        notifyObservers(\"update board\");\n    }\n    @Override\n    public void updatePlayerTurn() {\n        playerTurn = (playerTurn + 1) % players;\n        System.out.println(\"Turn: \" + playerTurn);\n    }\n\n    // getters\n    public String getIp() { return ip; }\n    public int getPort() { return port; }\n    @Override\n    public Tile[][] getBoard() { return gameBoard; }\n    //    public Tile[][] getBoard() { return gameBoard.getTiles(); }\n    @Override\n    public ArrayList<Tile> getCurrentTiles() { return currentTiles; }\n    @Override\n    public String getName() { return name; }\n    @Override\n    public int getCurrentPlayer() { return playerTurn; }\n    @Override\n    public int getMyTurn() { return myTurn; }\n    @Override\n    public Observable getObservable() {\n        return this;\n    }\n\n    // update\n    @Override\n    public void update(Observable o, Object arg) {\n\n//        String[] message = arg.toString().split(\",\");\n\n        if (arg.equals(\"guest connect\")) {\n            Platform.runLater(() -> {\n                System.out.println(\"host viewModel observer update: guest connect\");\n                playersProperty.set(host.GuestList.size());\n            });\n        }\n\n        if (arg.equals(\"start game\")) {\n            System.out.println(\"host viewModel observer update: start game\");\n        }\n\n        if (arg.equals(\"update board\")) {\n            System.out.println(\"host viewModel observer update: update board\");\n            gameBoard = host.hostPlayer.player.getCurrentBoardAsTiles();\n            setChanged();\n            notifyObservers(\"update board\");\n        }\n\n        if (arg.equals(\"pass turn\")) {\n            System.out.println(\"host viewModel observer update: pass turn\");\n            setChanged();\n            notifyObservers(\"pass turn\");\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/viewModel/VM_Host.java b/src/main/java/viewModel/VM_Host.java
--- a/src/main/java/viewModel/VM_Host.java	(revision 537d14922ab5ff5841b76148a35a4be06db1e97b)
+++ b/src/main/java/viewModel/VM_Host.java	(date 1687708434087)
@@ -116,16 +116,6 @@
             return scoreProperty.get();
         }
     }
-    @Override
-    public void placeTile(Tile selectedTile, int row, int col) {
-
-//        gameBoard.placeTile(selectedTile, row, col);
-    }
-    @Override
-    public void removeTile(int row, int column) {
-
-//        gameBoard.removeTile(row,column);
-    }
     @Override
     public void passTurn() {
 
@@ -141,27 +131,22 @@
             currentTiles.add(gameBag.getTileForTileArray(tile));
         }
     }
-    @Override
-    public void updateBoard() {
-
-//        host.hostPlayer.sendUpdateBoardMessage();
-
-//        gameBoard = Board.getBoard();
-//        setChanged();
-//        notifyObservers("update board");
-    }
     @Override
     public void updatePlayerTurn() {
         playerTurn = (playerTurn + 1) % players;
         System.out.println("Turn: " + playerTurn);
     }
+    @Override
+    public void challenge() {
+
+        host.hostPlayer.SendChallengeMessage();
+    }
 
     // getters
     public String getIp() { return ip; }
     public int getPort() { return port; }
     @Override
     public Tile[][] getBoard() { return gameBoard; }
-    //    public Tile[][] getBoard() { return gameBoard.getTiles(); }
     @Override
     public ArrayList<Tile> getCurrentTiles() { return currentTiles; }
     @Override
@@ -204,5 +189,17 @@
             setChanged();
             notifyObservers("pass turn");
         }
+
+        if (arg.equals("challenge fail")) {
+            System.out.println("guest viewModel observer update: challenge fail");
+            setChanged();
+            notifyObservers("challenge fail");
+        }
+
+        if (arg.equals("challenge alive")) {
+            System.out.println("guest viewModel observer update: challenge alive");
+            setChanged();
+            notifyObservers("challenge alive");
+        }
     }
 }
\ No newline at end of file
Index: src/main/java/viewModel/VM_Guest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package viewModel;\n\nimport javafx.beans.property.IntegerProperty;\nimport javafx.beans.property.SimpleIntegerProperty;\nimport model.data.Board;\nimport model.data.Tile;\nimport model.data.Word;\nimport model.logic.Guest;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Observable;\nimport java.util.Observer;\n\npublic class VM_Guest extends Observable implements ViewModel, Observer {\n\n    Guest guest;\n\n    Tile[][] gameBoard;\n    Tile.Bag gameBag;\n\n    String name, hostNickName;\n    ArrayList<Tile> currentTiles;\n    int playerTurn, myTurn, players;\n    private boolean isGameStart;\n    private final Object gameStartMonitor = new Object();\n\n    private final IntegerProperty scoreProperty;\n\n    // constructor\n    public VM_Guest(String text) {\n\n        // create guest\n        name = text;\n        guest = new Guest(name);\n        guest.addObserver(this); // vm_guest ( this ) observe Guest\n\n        // init\n        currentTiles = new ArrayList<>();\n        scoreProperty = new SimpleIntegerProperty();\n        isGameStart = false;\n\n        try { Thread.sleep(500); }\n        catch (InterruptedException e) { e.printStackTrace(); }\n\n        // set score to 0\n        scoreProperty.set(0);\n    }\n\n    // property\n    @Override\n    public IntegerProperty scoreProperty() {\n        return scoreProperty;\n    }\n\n    // game functions\n    public boolean connectToServer(String ip, int port) {\n\n        // if connected return true\n        try {\n\n            guest.CreateSocketToHost(ip, port);\n\n            try { Thread.sleep(500); }\n            catch (InterruptedException e) { e.printStackTrace(); }\n\n            return true;\n        }\n        // if didn't manage to connect return false\n        catch (IOException e) {\n\n            e.printStackTrace();\n            return false;\n        }\n    }\n    public synchronized boolean isGameStart() {\n\n        synchronized (gameStartMonitor) {\n            while (!isGameStart) {\n                try {\n                    gameStartMonitor.wait();\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return true;\n    }\n    @Override\n    public void startGame() {\n\n        gameBoard = guest.player.getCurrentBoardAsTiles();\n        gameBag = Tile.Bag.getBag();\n        // make turn for later to pass between players\n        myTurn = guest.player.getPlayerIndex();\n        players = guest.player.getNumOfPlayersInGame();\n        updateTiles();\n    }\n    @Override\n    public int tryPlaceWord(Word word) {\n\n        // get the current score\n        int score = scoreProperty.get();\n\n        // try place word func\n        guest.SendTryPlaceWordMessage(guest.NickName, hostNickName, word.toString(), word.getRow(), word.getCol(), word.isVertical());\n        try { Thread.sleep(2000); }\n        catch (InterruptedException e) { e.printStackTrace(); }\n\n        // set the new score\n        scoreProperty.set(guest.player.getCurrentScore());\n\n        // print for test\n        System.out.println(\"prev score: \" + score);\n        System.out.println(\"current score: \" + guest.player.getCurrentScore());\n\n        // if the currentScore - prevScore is 0, its mean the word received 0 points\n        if (score != 0) {\n            return scoreProperty.get() - score;\n        }\n        // if its this first turn send back the current score\n        else {\n            return scoreProperty.get();\n        }\n    }\n    @Override\n    public void placeTile(Tile selectedTile, int row, int col) {\n\n//        gameBoard.placeTile(selectedTile, row, col);\n    }\n    @Override\n    public void removeTile(int row, int column) {\n\n//        gameBoard.removeTile(row,column);\n    }\n    @Override\n    public void passTurn() {\n\n        guest.sendPassTurnMessage();\n    }\n    @Override\n    public void updateTiles() {\n\n        currentTiles.clear();\n        // get the player tiles and convert them from char to tile object\n        char[] tiles = guest.player.getCurrentTiles().toCharArray();\n        for (char tile: tiles) {\n            currentTiles.add(gameBag.getTileForTileArray(tile));\n        }\n    }\n    @Override\n    public void updateBoard() {\n\n//        guest.sendUpdateBoardMessage();\n\n//        gameBoard = Board.getBoard();\n//        setChanged();\n//        notifyObservers(\"update board\");\n    }\n    @Override\n    public void updatePlayerTurn() {\n        playerTurn = (playerTurn + 1) % players;\n        System.out.println(\"Turn: \" + playerTurn);\n    }\n\n    // getters\n    @Override\n    public Tile[][] getBoard() {\n\n        return gameBoard;\n    }\n    @Override\n    public ArrayList<Tile> getCurrentTiles() {\n        return currentTiles;\n    }\n    @Override\n    public String getName() { return name; }\n    @Override\n    public int getCurrentPlayer() {\n        return playerTurn;\n    }\n    @Override\n    public int getMyTurn() {\n        return myTurn;\n    }\n    @Override\n    public Observable getObservable() {\n        return this;\n    }\n\n    // update\n    @Override\n    public void update(Observable o, Object arg) {\n\n        // \"start game,\" + host.getNickName()\n        String[] message = arg.toString().split(\",\");\n\n        if (message[0].equals(\"start game\")) {\n            System.out.println(\"guest viewModel observer update: start game\");\n            isGameStart = true;\n            // init hostNickName and my turn\n            hostNickName = message[1];\n            // get out of wait()\n            synchronized (gameStartMonitor) { gameStartMonitor.notifyAll(); }\n        }\n\n        if (message[0].equals(\"update board\")) {\n            System.out.println(\"guest viewModel observer update: update board\");\n            gameBoard = guest.player.getCurrentBoardAsTiles();\n            setChanged();\n            notifyObservers(\"update board\");\n        }\n\n        if (message[0].equals(\"pass turn\")) {\n            System.out.println(\"guest viewModel observer update: pass turn\");\n            setChanged();\n            notifyObservers(\"pass turn\");\n        }\n\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/viewModel/VM_Guest.java b/src/main/java/viewModel/VM_Guest.java
--- a/src/main/java/viewModel/VM_Guest.java	(revision 537d14922ab5ff5841b76148a35a4be06db1e97b)
+++ b/src/main/java/viewModel/VM_Guest.java	(date 1687708434073)
@@ -123,16 +123,6 @@
             return scoreProperty.get();
         }
     }
-    @Override
-    public void placeTile(Tile selectedTile, int row, int col) {
-
-//        gameBoard.placeTile(selectedTile, row, col);
-    }
-    @Override
-    public void removeTile(int row, int column) {
-
-//        gameBoard.removeTile(row,column);
-    }
     @Override
     public void passTurn() {
 
@@ -148,20 +138,16 @@
             currentTiles.add(gameBag.getTileForTileArray(tile));
         }
     }
-    @Override
-    public void updateBoard() {
-
-//        guest.sendUpdateBoardMessage();
-
-//        gameBoard = Board.getBoard();
-//        setChanged();
-//        notifyObservers("update board");
-    }
     @Override
     public void updatePlayerTurn() {
         playerTurn = (playerTurn + 1) % players;
         System.out.println("Turn: " + playerTurn);
     }
+    @Override
+    public void challenge() {
+
+        guest.SendChallengeMessage();
+    }
 
     // getters
     @Override
@@ -217,5 +203,16 @@
             notifyObservers("pass turn");
         }
 
+        if (message[0].equals("challenge fail")) {
+            System.out.println("guest viewModel observer update: challenge fail");
+            setChanged();
+            notifyObservers("challenge fail");
+        }
+
+        if (message[0].equals("challenge alive")) {
+            System.out.println("guest viewModel observer update: challenge alive");
+            setChanged();
+            notifyObservers("challenge alive");
+        }
     }
 }
\ No newline at end of file
Index: src/main/java/viewModel/ViewModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package viewModel;\n\nimport javafx.beans.property.IntegerProperty;\nimport model.data.Tile;\nimport model.data.Word;\nimport java.util.ArrayList;\nimport java.util.Observable;\n\npublic interface ViewModel {\n\n    // property\n    IntegerProperty scoreProperty();\n\n    // game functions\n    void startGame();\n    int tryPlaceWord(Word word);\n    void placeTile(Tile selectedTile, int row, int col);\n    void removeTile(int row, int column);\n    void passTurn();\n    void updateTiles();\n    void updateBoard();\n    void updatePlayerTurn();\n\n    // getters\n    ArrayList<Tile> getCurrentTiles();\n    Tile[][] getBoard();\n    String getName();\n    int getCurrentPlayer();\n    int getMyTurn();\n    Observable getObservable();\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/viewModel/ViewModel.java b/src/main/java/viewModel/ViewModel.java
--- a/src/main/java/viewModel/ViewModel.java	(revision 537d14922ab5ff5841b76148a35a4be06db1e97b)
+++ b/src/main/java/viewModel/ViewModel.java	(date 1687708434077)
@@ -14,12 +14,10 @@
     // game functions
     void startGame();
     int tryPlaceWord(Word word);
-    void placeTile(Tile selectedTile, int row, int col);
-    void removeTile(int row, int column);
     void passTurn();
     void updateTiles();
-    void updateBoard();
     void updatePlayerTurn();
+    void challenge();
 
     // getters
     ArrayList<Tile> getCurrentTiles();
Index: src/main/java/view/BoardViewController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package view;\n\nimport javafx.application.Platform;\nimport javafx.beans.binding.Bindings;\nimport javafx.collections.ObservableList;\nimport javafx.event.ActionEvent;\nimport javafx.fxml.FXML;\nimport javafx.fxml.Initializable;\nimport javafx.geometry.Pos;\nimport javafx.scene.Node;\nimport javafx.scene.control.Button;\nimport javafx.scene.control.Label;\nimport javafx.scene.input.MouseEvent;\nimport javafx.scene.layout.AnchorPane;\nimport javafx.scene.layout.GridPane;\nimport javafx.scene.layout.Pane;\nimport javafx.scene.text.Font;\nimport javafx.scene.text.Text;\nimport javafx.util.Pair;\nimport model.data.Tile;\nimport model.data.Word;\nimport viewModel.VM_Guest;\nimport viewModel.VM_Host;\nimport viewModel.ViewModel;\nimport java.net.URL;\nimport java.util.*;\n\npublic class BoardViewController implements Initializable, Observer {\n\n    ViewModel viewModel;\n\n    Tile[][] gameBoard;\n\n    ArrayList<Tile> currentTiles;  // the tiles in the hand\n    ArrayList<Button> usedButtons; // the tiles button that used during turn\n\n    Pair<Integer, Integer>[] positions; // the used tiles positions\n    int positionsIndex;                 // an index to put in the position array, also for checking\n\n    Tile selectedTile;    // the tile that selected\n    Button clickedButton; // the tile button that selected\n\n    boolean blockingTiles; // if selected tile then block other buttons\n\n    @FXML\n    private GridPane boardGrid;\n\n    @FXML\n    private Text score, message;\n\n    @FXML\n    private AnchorPane tilesContainer, anchorPane;\n\n    @FXML\n    private Button EndTurn, resetWord, TryPlaceWord;\n\n    public void setViewModel(ViewModel vm) {\n\n        viewModel = vm;\n        viewModel.getObservable().addObserver(this); // board controller observe viewModel\n\n        System.out.println(\"Player: \" + vm.getName());\n        viewModel.startGame();\n\n        // bind the score text to the score property\n        score.textProperty().bind(viewModel.scoreProperty().asString());\n\n        // get the game board\n        gameBoard = viewModel.getBoard();\n\n        // init tile for hand\n        currentTiles = new ArrayList<>();\n        currentTiles = viewModel.getCurrentTiles();\n        updateHand();\n\n        // enable all buttons\n        blockingTiles = false;\n        usedButtons = new ArrayList<>();\n\n        // create positions array for later\n        positions = new Pair[8];\n        positionsIndex = 0;\n\n        if (viewModel instanceof VM_Guest) {\n\n            message.setText(\"\");\n\n            // disable all\n            disableButtons();\n            TryPlaceWord.setDisable(true);\n            resetWord.setDisable(true);\n            EndTurn.setDisable(true);\n        }\n        else {\n            message.setText(\"First word must be placed on the purple square\");\n        }\n    }\n\n    @Override\n    public void initialize(URL location, ResourceBundle resources) {\n    }\n\n    public void updateHand() {\n\n        ObservableList<Node> children = tilesContainer.getChildren();\n\n        int tileIndex = 0;\n        for (Node child : children) {\n            if (child instanceof Button button) {\n                Tile tile = currentTiles.get(tileIndex);\n\n                button.setText(String.valueOf(tile.letter));\n\n                tileIndex++;\n                if (tileIndex >= currentTiles.size()) {\n                    break;\n                }\n            }\n        }\n    }\n\n    @FXML\n    public void handleTileButtonClick(ActionEvent event) {\n\n        clickedButton = (Button) event.getSource();\n        String buttonText = clickedButton.getText();\n\n        // Find the corresponding Tile object based on the button text\n        selectedTile = null;\n        for (Tile tile : currentTiles) {\n            if (String.valueOf(tile.letter).equals(buttonText)) {\n                selectedTile = tile;\n                break;\n            }\n        }\n\n        if (!blockingTiles) {\n\n            disableButtons();\n\n            if (selectedTile != null) {\n                System.out.println(\"Selected tile: \" + selectedTile.letter);\n            }\n        }\n        else {\n\n            enableButtons();\n        }\n    }\n\n    @FXML\n    public void handlePaneClick(MouseEvent event) {\n\n        Pane clickedPane = (Pane) event.getSource();\n\n        Integer rowIndex = GridPane.getRowIndex(clickedPane);\n        Integer columnIndex = GridPane.getColumnIndex(clickedPane);\n\n        // Perform actions based on the row and column\n        int row = rowIndex;\n        int column = columnIndex;\n        System.out.println(\"Clicked pane at row: \" + row + \", column: \" + column);\n\n        // check to see if a tile was selected\n        if (blockingTiles && selectedTile != null) {\n\n            // check if there is no tile\n            if (gameBoard[row][column] == null) {\n\n                // place a tile on board\n                gameBoard[row][column] = selectedTile;\n//                viewModel.placeTile(selectedTile, row, column);\n\n                // place only letter\n                Label letter = new Label(String.valueOf(selectedTile.letter));\n                letter.setAlignment(Pos.CENTER);\n                // Set font size, weight and color of the letter\n                letter.setStyle(\"-fx-font-size: 30; -fx-font-weight: bold; -fx-text-fill: white;\");\n                // Set layout constraints to center the label within the pane\n                letter.setMaxSize(Double.MAX_VALUE, Double.MAX_VALUE);\n                // adding the letter to the board\n                boardGrid.add(letter, column, row);\n\n                // adding the tile to list of used tiles for the blocking buttons\n                usedButtons.add(clickedButton);\n\n                // Enable all other tile buttons\n                enableButtons();\n                for (Node child : tilesContainer.getChildren()) {\n                    if (child instanceof Button button && child.equals(clickedButton)) {\n                        button.setDisable(true);\n                    }\n                }\n\n                // for later if ill want to reset word\n                positions[positionsIndex] = new Pair<>(row, column);\n                // for next itr\n                positionsIndex++;\n            }\n            else {\n                System.out.println(\"Error in putting tile, there's already tile\");\n            }\n        }\n    }\n\n    public void resetTilesButtonClick() {\n\n        // remove the tiles from original board\n        for (Pair<Integer, Integer> pair: positions) {\n\n            if (pair != null) {\n\n                int row = pair.getKey();\n                int column = pair.getValue();\n                gameBoard[row][column] = null;\n//                viewModel.removeTile(row,column);\n            }\n            else {\n                break;\n            }\n        }\n\n        // Remove the placed tiles from the boardGrid\n        ObservableList<Node> children = boardGrid.getChildren();\n        ArrayList<Node> tilesToRemove = new ArrayList<>();\n        for (Node child : children) {\n            if (child instanceof Label) {\n                int row = GridPane.getRowIndex(child);\n                int column = GridPane.getColumnIndex(child);\n\n                // Check if the tile was placed during the current turn\n                if (isTilePlacedDuringTurn(row, column)) {\n                    tilesToRemove.add(child);\n                }\n            }\n        }\n\n        for (Node tile : tilesToRemove) {\n            boardGrid.getChildren().remove(tile);\n        }\n\n        // reset other things\n        resetPositionsArray();\n        usedButtons.clear();\n        clickedButton = null;\n        selectedTile = null;\n        enableButtons();\n    }\n\n    public boolean isTilePlacedDuringTurn(int row, int column) {\n\n        // Check if the tile position matches any of the positions stored in the positions array\n        for (Pair<Integer, Integer> position : positions) {\n            if (position != null && position.getKey() == row && position.getValue() == column) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public void TryPlaceWordButtonClick() {\n\n        ArrayList<Tile> tilesForWord = new ArrayList<>();\n        int startRow = 0;\n        int startCol = 0;\n        boolean vertical = false;\n        boolean oneTileCheck = false;\n\n        // if only placed one tile to continue word from other tiles\n        if (positionsIndex == 1) {\n\n            startRow = positions[0].getKey();\n            startCol = positions[0].getValue();\n\n            if (startRow == 14) {\n                // check vertical\n                if (this.gameBoard[startRow - 1][startCol] != null) {\n                    vertical = true;\n                    oneTileCheck = true;\n                }\n            }\n            else if (startRow == 0) {\n                if (gameBoard[startRow + 1][startCol] != null) {\n                    vertical = true;\n                    oneTileCheck = true;\n                }\n            }\n            else {\n                if (gameBoard[startRow - 1][startCol] != null || gameBoard[startRow + 1][startCol] != null) {\n                    vertical = true;\n                    oneTileCheck = true;\n                }\n            }\n\n            if (startCol == 14) {\n                if (gameBoard[startRow][startCol - 1] != null) {\n                    vertical = false;\n                    oneTileCheck = true;\n                }\n            }\n            else if (startCol == 0) {\n                if (gameBoard[startRow][startCol + 1] != null) {\n                    vertical = false;\n                    oneTileCheck = true;\n                }\n            }\n            else {\n                // check not vertical\n                if (gameBoard[startRow][startCol - 1] != null || gameBoard[startRow][startCol + 1] != null) {\n                    vertical = false;\n                    oneTileCheck = true;\n                }\n            }\n\n            if (!oneTileCheck) {\n\n                System.out.println(\"Word must contain 2 tiles or more\");\n                message.setText(\"Word must contain 2 tiles or more\");\n                resetTilesButtonClick();\n                return;\n            }\n        }\n        if (positionsIndex > 1 || oneTileCheck) {\n\n            if (!oneTileCheck) {\n\n                // checking to see if all is on the same row/col and find the first tile location the player put\n                // not vertical ( from left to right )\n                if (positions[0].getKey().intValue() == positions[1].getKey().intValue()) {\n\n                    System.out.println(\"not vertical\");\n                    startRow = positions[0].getKey();\n                    startCol = positions[0].getValue();\n\n                    for (int i = 0; i < positionsIndex - 1; i++) {\n\n                        if (positions[i].getKey().intValue() != positions[i + 1].getKey().intValue()) {\n                            System.out.println(\"Word placed incorrect\");\n                            message.setText(\"Word placed incorrect\");\n                            resetTilesButtonClick();\n                            return;\n                        }\n                        else {\n                            if (startCol > positions[i + 1].getValue()) {\n                                startCol = positions[i + 1].getValue();\n                            }\n                        }\n                    }\n                }\n                // else vertical\n                else {\n\n                    System.out.println(\"vertical\");\n                    vertical = true;\n                    startRow = positions[0].getKey();\n                    startCol = positions[0].getValue();\n\n                    for (int i = 0; i < positionsIndex - 1; i++) {\n\n                        if (positions[i].getValue().intValue() != positions[i + 1].getValue().intValue()) {\n                            System.out.println(\"Word placed incorrect\");\n                            message.setText(\"Word placed incorrect\");\n                            resetTilesButtonClick();\n                            return;\n                        }\n                        else {\n                            if (startRow > positions[i + 1].getKey()) {\n                                startRow = positions[i + 1].getKey();\n                            }\n                        }\n                    }\n                }\n            }\n\n            // check if there is null tiles that are still part of the word\n            // and place tiles in word by order\n            int i = 1;\n            if (vertical) {\n\n                // checking if there are tiles before\n                while ((startRow - i) >= 0) {\n\n                    if (gameBoard[startRow - i][startCol] != null) {\n\n                        // set the new start row\n                        startRow--;\n                    }\n                    else { break; }\n                }\n\n                // add the first tile to the array\n                if (isTilePlacedDuringTurn(startRow, startCol)) {\n\n                    tilesForWord.add(gameBoard[startRow][startCol]);\n                }\n                else {\n\n                    tilesForWord.add(null);\n                }\n\n                // checking if there are tiles after start to add to array\n                while ((startRow + i) <= 14) {\n\n                    if (gameBoard[startRow + i][startCol] != null) {\n\n                        if (isTilePlacedDuringTurn(startRow + i, startCol)) {\n\n                            tilesForWord.add(gameBoard[startRow + i][startCol]);\n                        }\n                        else {\n\n                            tilesForWord.add(null);\n                        }\n                        i++;\n                    }\n                    else { break; }\n                }\n            }\n            //not vertical\n            else {\n\n                // checking if there are tiles before\n                while ((startCol - i) >= 0) {\n\n                    if (gameBoard[startRow][startCol - i] != null) {\n\n                        // set the new start row\n                        startCol--;\n                    }\n                    else { break; }\n                }\n\n                // add the first tile to the array\n                if (isTilePlacedDuringTurn(startRow, startCol)) {\n\n                    tilesForWord.add(gameBoard[startRow][startCol]);\n                }\n                else {\n\n                    tilesForWord.add(null);\n                }\n\n                // checking if there are tiles after start to add to array\n                while ((startCol + i) <= 14) {\n\n                    if (gameBoard[startRow][startCol + i] != null) {\n\n                        // add the first tile to the array\n                        if (isTilePlacedDuringTurn(startRow, startCol + i)) {\n\n                            tilesForWord.add(gameBoard[startRow][startCol + i]);\n                        }\n                        else {\n\n                            tilesForWord.add(null);\n                        }\n                        i++;\n                    }\n                    else { break; }\n                }\n            }\n        }\n        else {\n\n            System.out.println(\"Word must contain 2 tiles or more\");\n            message.setText(\"Word must contain 2 tiles or more\");\n            return;\n        }\n\n\n        Tile[] tilesArray = new Tile[tilesForWord.size()];\n        for (int i = 0; i < tilesArray.length; i++) {\n            tilesArray[i] = tilesForWord.get(i);\n        }\n        System.out.println();\n\n        // build word from tiles\n        Word word = new Word(tilesArray, startRow, startCol, vertical);\n        System.out.println(\"Word: \" + word + \", At: [\" + word.getRow() + \",\" + word.getCol() + \"], Vertical: \" + word.isVertical());\n\n        // if word legal pass turn else call reset button\n        int wordScore = viewModel.tryPlaceWord(word);\n        if (wordScore > 0) {\n\n            // success\n            System.out.println(\"Score: \" + wordScore);\n            successPlaceWord(word);\n            message.setText(\"\");\n\n            // pass turn to next player\n            viewModel.passTurn();\n        }\n        else {\n\n            System.out.println(\"Word not legal\");\n            message.setText(\"Word not legal\");\n            resetTilesButtonClick();\n        }\n    }\n\n    public void resetPositionsArray() {\n\n        // Clear the array by setting elements to null\n        Arrays.fill(positions, null);\n        positionsIndex = 0;\n    }\n\n    public void enableButtons() {\n\n        blockingTiles = false;\n        for (Node child : tilesContainer.getChildren()) {\n            if (child instanceof Button button && !child.equals(clickedButton) && !usedButtons.contains(child)) {\n                button.setDisable(false);\n            }\n        }\n    }\n\n    public void disableButtons() {\n\n        blockingTiles = true;\n        for (Node child : tilesContainer.getChildren()) {\n            if (child instanceof Button button && !child.equals(clickedButton)) {\n                button.setDisable(true);\n            }\n        }\n    }\n\n    public void successPlaceWord(Word word) {\n\n        // get the new tiles\n        viewModel.updateTiles();\n        updateHand();\n\n        // reset all helpers for a new turn\n        resetPositionsArray();\n        usedButtons.clear();\n        clickedButton = null;\n        enableButtons();\n\n        // send updated board to everyone\n//        viewModel.updateBoard();\n    }\n\n    public void EndTurnButtonClick() {\n\n        // check if the player didn't put tiles and then pressed end turn\n        resetTilesButtonClick();\n        viewModel.passTurn();\n    }\n\n    public void EndGameButtonClick() {\n\n        //call resetPositionsArray();\n        System.out.println(\"End Game Clicked\");\n    }\n\n    @Override\n    public void update(Observable o, Object arg) {\n\n        if (o instanceof ViewModel vm) {\n\n            if (arg.equals(\"pass turn\")) {\n                System.out.println(\"board observer update: pass turn\");\n                // update player turn for each player\n                vm.updatePlayerTurn();\n                // Check if it's this player's turn\n                if (vm.getCurrentPlayer() == viewModel.getMyTurn()) {\n                    // enable all\n                    message.setText(\"Your turn!\");\n                    enableButtons();\n                    TryPlaceWord.setDisable(false);\n                    resetWord.setDisable(false);\n                    EndTurn.setDisable(false);\n                }\n                else {\n                    // disable all\n                    message.setText(\"\");\n                    disableButtons();\n                    TryPlaceWord.setDisable(true);\n                    resetWord.setDisable(true);\n                    EndTurn.setDisable(true);\n                }\n            }\n\n            if (arg.equals(\"update board\")) {\n                System.out.println(\"board observer update: update board\");\n                gameBoard = viewModel.getBoard();\n                for (int row = 0; row < 15; row++) {\n                    for (int col = 0; col < 15; col++) {\n                        if (gameBoard[row][col] != null) {\n                            // place only letter\n                            Label letter = new Label(String.valueOf(gameBoard[row][col].letter));\n                            letter.setAlignment(Pos.CENTER);\n                            // Set font size, weight and color of the letter\n                            letter.setStyle(\"-fx-font-size: 30; -fx-font-weight: bold; -fx-text-fill: white;\");\n                            // Set layout constraints to center the label within the pane\n                            letter.setMaxSize(Double.MAX_VALUE, Double.MAX_VALUE);\n                            // adding the letter to the board\n                            final int finalRow = row;\n                            final int finalCol = col;\n                            Platform.runLater(() -> {\n                                if (!boardGrid.getChildren().contains(letter)) {\n                                    boardGrid.add(letter, finalCol, finalRow);\n                                }\n                            });\n                        }\n                    }\n                }\n            }\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/view/BoardViewController.java b/src/main/java/view/BoardViewController.java
--- a/src/main/java/view/BoardViewController.java	(revision 537d14922ab5ff5841b76148a35a4be06db1e97b)
+++ b/src/main/java/view/BoardViewController.java	(date 1687714191486)
@@ -24,6 +24,8 @@
 import viewModel.ViewModel;
 import java.net.URL;
 import java.util.*;
+import java.util.concurrent.Executors;
+import java.util.concurrent.ThreadPoolExecutor;
 
 public class BoardViewController implements Initializable, Observer {
 
@@ -42,6 +44,8 @@
 
     boolean blockingTiles; // if selected tile then block other buttons
 
+    ThreadPoolExecutor executor = (ThreadPoolExecutor) Executors.newFixedThreadPool(1);
+
     @FXML
     private GridPane boardGrid;
 
@@ -52,7 +56,7 @@
     private AnchorPane tilesContainer, anchorPane;
 
     @FXML
-    private Button EndTurn, resetWord, TryPlaceWord;
+    private Button EndTurn, resetWord, TryPlaceWord, challenge;
 
     public void setViewModel(ViewModel vm) {
 
@@ -94,6 +98,22 @@
         else {
             message.setText("First word must be placed on the purple square");
         }
+
+        // allow challenge button for 10 seconds
+        challenge.setDisable(false);
+
+        executor.submit(() -> {
+            try {
+                for (int i = 0; i < 10; i++) {
+                    Thread.sleep(1000);  // Sleep for one second at a time
+                }
+                challenge.setDisable(true);
+            }
+            catch (InterruptedException e) {
+                // If the thread was interrupted, stop the execution
+                return;
+            }
+        });
     }
 
     @Override
@@ -175,7 +195,7 @@
                 Label letter = new Label(String.valueOf(selectedTile.letter));
                 letter.setAlignment(Pos.CENTER);
                 // Set font size, weight and color of the letter
-                letter.setStyle("-fx-font-size: 30; -fx-font-weight: bold; -fx-text-fill: white;");
+                letter.setStyle("-fx-font-size: 20; -fx-font-weight: bold; -fx-text-fill: white;");
                 // Set layout constraints to center the label within the pane
                 letter.setMaxSize(Double.MAX_VALUE, Double.MAX_VALUE);
                 // adding the letter to the board
@@ -213,7 +233,6 @@
                 int row = pair.getKey();
                 int column = pair.getValue();
                 gameBoard[row][column] = null;
-//                viewModel.removeTile(row,column);
             }
             else {
                 break;
@@ -554,12 +573,20 @@
         System.out.println("End Game Clicked");
     }
 
+    @FXML
+    public void challengeButtonClick() {
+
+        viewModel.challenge();
+    }
+
     @Override
     public void update(Observable o, Object arg) {
 
         if (o instanceof ViewModel vm) {
 
             if (arg.equals("pass turn")) {
+                executor.shutdownNow();  // Try to stop currently running tasks
+                executor = (ThreadPoolExecutor) Executors.newFixedThreadPool(1);  // Recreate the executor
                 System.out.println("board observer update: pass turn");
                 // update player turn for each player
                 vm.updatePlayerTurn();
@@ -579,6 +606,53 @@
                     TryPlaceWord.setDisable(true);
                     resetWord.setDisable(true);
                     EndTurn.setDisable(true);
+                }
+                // allow challenge button for 10 seconds
+                challenge.setDisable(false);
+
+                executor.submit(() -> {
+                    try {
+                        for (int i = 0; i < 10; i++) {
+                            Thread.sleep(1000);  // Sleep for one second at a time
+                        }
+                        challenge.setDisable(true);
+                    }
+                    catch (InterruptedException e) {
+                        // If the thread was interrupted, stop the execution
+                        return;
+                    }
+                });
+//                challengeSleep = new Thread(() -> {
+//                    try { Thread.sleep(10000); }
+//                    catch (InterruptedException e) { e.printStackTrace(); }
+//                    challenge.setDisable(true);
+//
+//                });
+//                challengeSleep.start();
+            }
+
+            if (arg.equals("challenge alive")) {
+                System.out.println("board observer update: challenge alive");
+                message.setText("Someone clicked challenge");
+                // reset all player options and disable buttons
+                resetTilesButtonClick();
+                disableButtons();
+                TryPlaceWord.setDisable(true);
+                resetWord.setDisable(true);
+                EndTurn.setDisable(true);
+                challenge.setDisable(true);
+            }
+
+            if (arg.equals("challenge fail")) {
+                System.out.println("board observer update: challenge fail");
+                // Check if it's this player's turn
+                if (vm.getCurrentPlayer() == viewModel.getMyTurn()) {
+                    // enable all
+                    message.setText("Your turn!");
+                    enableButtons();
+                    TryPlaceWord.setDisable(false);
+                    resetWord.setDisable(false);
+                    EndTurn.setDisable(false);
                 }
             }
 
@@ -592,7 +666,7 @@
                             Label letter = new Label(String.valueOf(gameBoard[row][col].letter));
                             letter.setAlignment(Pos.CENTER);
                             // Set font size, weight and color of the letter
-                            letter.setStyle("-fx-font-size: 30; -fx-font-weight: bold; -fx-text-fill: white;");
+                            letter.setStyle("-fx-font-size: 20; -fx-font-weight: bold; -fx-text-fill: white;");
                             // Set layout constraints to center the label within the pane
                             letter.setMaxSize(Double.MAX_VALUE, Double.MAX_VALUE);
                             // adding the letter to the board
Index: src/main/java/model/logic/MessageHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model.logic;\n\nimport com.google.gson.JsonObject;\nimport model.data.Tile;\n\nimport java.net.Socket;\n\npublic class MessageHandler {\n\n    public JsonHandler jsonHandler;\n\n    /**\n     * The MessageHandler function is responsible for handling the messages that are sent to the server.\n     * It takes in a message and then parses it into a JSONObject, which is then used to determine what type of message was sent.\n     * Depending on what type of message was received, different actions will be taken by the MessageHandler function.\n\n     *\n     *\n     * @return A jsonhandler object\n     *\n     * @docauthor Trelent\n     */\n    public MessageHandler() {\n        jsonHandler = new JsonHandler();\n    }\n\n    /**\n     * The CreateStartGameMessage function creates a JSON message that is sent to all clients when the game starts.\n     *\n     *\n     * @param String tilesInCapital Add the tiles to the message\n     * @param String hostNickName Identify the host of the game\n     *\n     * @return A jsonobject\n     *\n     * @docauthor Trelent\n     */\n    public void CreateStartGameMessage(String tilesInCapital, String hostNickName, int playerIndex, int numOfPlayers){\n        // only serverHost\n        this.jsonHandler.addMessageType(\"start game\");\n        this.jsonHandler.addSource(hostNickName);\n        this.jsonHandler.addStartTiles(tilesInCapital);\n        this.jsonHandler.addPlayerIndex(playerIndex);\n        this.jsonHandler.addNumOfPlayers(numOfPlayers);\n    }\n    /**\n     * The CreateTryAgainMessage function creates a message that is sent to the client when they have lost.\n     * The message contains information about their previous score, and the action that was performed by the serverHost.\n     *\n     *\n     * @param String destination Specify the destination of the message\n     * @param int prevScore Send the previous score to the client so that it can be displayed in a message\n     * @param String action Determine if the player is trying to connect or disconnect\n     * @param String hostNickName Identify the host of the game\n     *\n     * @return A jsonobject\n     *\n     * @docauthor Trelent\n     */\n    public void CreateTryAgainMessage(String destination, int prevScore, String action, String hostNickName){\n        // only serverHost\n        this.jsonHandler.addMessageType(\"try again\");\n        this.jsonHandler.addAction(action);\n        this.jsonHandler.addSource(hostNickName);\n        this.jsonHandler.addDestination(destination);\n        this.jsonHandler.addNewScore(prevScore);\n        // this.jsonHandler.addBoard(board);\n        // addPrevBoard\n    }\n    /**\n     * The CreateSuccessMessage function is used to create a success message.\n     *\n     *\n     * @param String destination Specify the destination of the message\n     * @param int newScore Add the new score to the json message\n     * @param String action Determine what type of message is being sent\n     * @param String newCurrentTiles Add the new tiles to the currenttiles field in the json message\n     * @param String hostNickName Identify the host of the game\n     *\n     * @return A jsonobject\n     *\n     * @docauthor Trelent\n     */\n    public void CreateSuccessMessage(String destination, int newScore, String action, String newCurrentTiles, String hostNickName){\n        // only serverHost\n        this.jsonHandler.addMessageType(\"success\");\n        this.jsonHandler.addAction(action);\n        this.jsonHandler.addSource(hostNickName);\n        this.jsonHandler.addDestination(destination);\n        this.jsonHandler.addNewScore(newScore);\n        this.jsonHandler.addNewCurrentTiles(newCurrentTiles);\n        // this.jsonHandler.addBoard(board);\n        // addPrevBoard\n    }\n    /**\n     * The CreateSucceededChallengeYouMessage function creates a message that is sent to the client who has been challenged by another player.\n     *\n     *\n     * @param Character[][] board Send the board to the client\n     * @param String hostNickName Identify the host of the game\n     *\n     * @return A jsonobject\n     *\n     * @docauthor Trelent\n     */\n    public void CreateSucceededChallengeYouMessage(String hostNickName, String prevScore){\n        // only serverHost\n        this.jsonHandler.addMessageType(\"succeeded in challenging you\");\n        this.jsonHandler.addSource(hostNickName);\n        this.jsonHandler.addPrevScore(Integer.parseInt(prevScore));\n    }\n    /**\n     * The CreateUpdateBoardMessage function creates a message that updates the board.\n     *\n     *\n     * @param  board Send the board to the client\n     * @param  hostNickName Identify the source of the message\n     *\n     * @return A jsonobject\n     *\n     * @docauthor Trelent\n     */\n    public void CreateUpdateBoardMessage(String board, String hostNickName){\n        // only serverHost\n        this.jsonHandler.addMessageType(\"update board\");\n        this.jsonHandler.addSource(hostNickName);\n        this.jsonHandler.addBoard(board);\n    }\n\n    public void CreateTryPlaceWordMessage(String source, String destination, String word, int prevScore,\n                                          int row, int column, boolean vertical, String currentTiles, String socketSource){\n        this.jsonHandler.addMessageType(\"try place word\");\n        this.jsonHandler.addSource(source);\n        this.jsonHandler.addDestination(destination);\n        this.jsonHandler.addWord(word);\n        this.jsonHandler.addRow(row);\n        this.jsonHandler.addColumn(column);\n        this.jsonHandler.addVertical(vertical);\n        this.jsonHandler.addCurrentTiles(currentTiles);\n        this.jsonHandler.addSocketSource(socketSource);\n        this.jsonHandler.addPrevScore(prevScore);\n//        this.jsonHandler.addBoard(board);\n        // addPrevBoard\n    }\n    /**\n     * The CreateChallengeMessage function creates a JSON message that is sent to the server\n     * when a player challenges another player's word. The function takes in the source, destination,\n     * and word of the challenge as well as where on the board it was placed (row and column) and whether or not it was placed vertically.\n\n     *\n     * @param String source Identify the player who sent the message\n     * @param String destination Specify the destination of the message\n     * @param String word Add the word to the message\n     * @param int row Indicate the row of the first letter in a word\n     * @param int column Specify the column in which the word is placed\n    public void createchallengeresponsemessage(string source, string destination, boolean valid){\n            this\n     * @param boolean vertical Indicate whether the word is placed vertically or horizontally\n     * @param String currentTiles Add the current tiles to the json message\n\n     *\n     * @return A jsonobject with the following fields:\n     *\n     * @docauthor Trelent\n     */\n    public void CreateChallengeMessage(String source, String destination, String word,\n                                       int row, int column, boolean vertical, String currentTiles, String socketSource){\n        this.jsonHandler.addMessageType(\"challenge\");\n        this.jsonHandler.addSource(source);\n        this.jsonHandler.addDestination(destination);\n        this.jsonHandler.addWord(word);\n        this.jsonHandler.addRow(row);\n        this.jsonHandler.addColumn(column);\n        this.jsonHandler.addVertical(vertical);\n        this.jsonHandler.addCurrentTiles(currentTiles);\n        this.jsonHandler.addSocketSource(socketSource);\n    }\n\n    public void CreateMessageToGameServer(String message, String socketSource){\n        this.jsonHandler.addMessageType(\"to game server\");\n        this.jsonHandler.addMessage(message);\n        this.jsonHandler.addSocketSource(socketSource);\n    }\n\n    public void createPassTurnMessage() {\n        this.jsonHandler.addMessageType(\"pass turn\");\n    }\n\n    public void createEndGameMessage() {\n        this.jsonHandler.addMessageType(\"end game\");\n    }\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/model/logic/MessageHandler.java b/src/main/java/model/logic/MessageHandler.java
--- a/src/main/java/model/logic/MessageHandler.java	(revision 537d14922ab5ff5841b76148a35a4be06db1e97b)
+++ b/src/main/java/model/logic/MessageHandler.java	(date 1687708978172)
@@ -154,7 +154,7 @@
      * @param int row Indicate the row of the first letter in a word
      * @param int column Specify the column in which the word is placed
     public void createchallengeresponsemessage(string source, string destination, boolean valid){
-            this
+    this
      * @param boolean vertical Indicate whether the word is placed vertically or horizontally
      * @param String currentTiles Add the current tiles to the json message
 
@@ -163,16 +163,8 @@
      *
      * @docauthor Trelent
      */
-    public void CreateChallengeMessage(String source, String destination, String word,
-                                       int row, int column, boolean vertical, String currentTiles, String socketSource){
+    public void CreateChallengeMessage(String socketSource){
         this.jsonHandler.addMessageType("challenge");
-        this.jsonHandler.addSource(source);
-        this.jsonHandler.addDestination(destination);
-        this.jsonHandler.addWord(word);
-        this.jsonHandler.addRow(row);
-        this.jsonHandler.addColumn(column);
-        this.jsonHandler.addVertical(vertical);
-        this.jsonHandler.addCurrentTiles(currentTiles);
         this.jsonHandler.addSocketSource(socketSource);
     }
 
@@ -185,10 +177,13 @@
     public void createPassTurnMessage() {
         this.jsonHandler.addMessageType("pass turn");
     }
+    public void createStopChallengeAlive() {
+        this.jsonHandler.addMessageType("challenge alive");
+    }
 
     public void createEndGameMessage() {
         this.jsonHandler.addMessageType("end game");
     }
 
 
-}
+}
\ No newline at end of file
Index: target/classes/view/Board-view.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<?import javafx.scene.control.Button?>\n<?import javafx.scene.layout.AnchorPane?>\n<?import javafx.scene.layout.ColumnConstraints?>\n<?import javafx.scene.layout.GridPane?>\n<?import javafx.scene.layout.Pane?>\n<?import javafx.scene.layout.RowConstraints?>\n<?import javafx.scene.text.Font?>\n<?import javafx.scene.text.Text?>\n\n<AnchorPane fx:id=\"anchorPane\" maxHeight=\"-Infinity\" maxWidth=\"-Infinity\" minHeight=\"-Infinity\" minWidth=\"-Infinity\" prefHeight=\"790.0\" prefWidth=\"952.0\" style=\"-fx-background-color: #EDEADE;\" xmlns=\"http://javafx.com/javafx/19\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"view.BoardViewController\">\n   <children>\n      <Button fx:id=\"EndTurn\" layoutX=\"728.0\" layoutY=\"717.0\" mnemonicParsing=\"false\" onAction=\"#EndTurnButtonClick\" prefHeight=\"50.0\" prefWidth=\"68.0\" stylesheets=\"@../css/button.css\" text=\"End Turn\" />\n      <Button fx:id=\"EndGame\" layoutX=\"862.0\" layoutY=\"717.0\" mnemonicParsing=\"false\" onAction=\"#EndGameButtonClick\" prefHeight=\"50.0\" prefWidth=\"77.0\" text=\"End Game\" />\n      <Text layoutX=\"779.0\" layoutY=\"60.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"Score:\" textAlignment=\"CENTER\" wrappingWidth=\"91.00000000000011\">\n         <font>\n            <Font size=\"32.0\" />\n         </font>\n      </Text>\n      <Text layoutX=\"10.0\" layoutY=\"750.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"Tiles:\" textAlignment=\"CENTER\" wrappingWidth=\"84.16746520996094\">\n         <font>\n            <Font size=\"32.0\" />\n         </font>\n      </Text>\n      <Pane layoutX=\"10.0\" layoutY=\"60.0\" prefHeight=\"20.0\" prefWidth=\"20.0\" style=\"-fx-background-color: #0096FF;\" />\n      <Pane layoutX=\"10.0\" layoutY=\"90.0\" prefHeight=\"20.0\" prefWidth=\"20.0\" style=\"-fx-background-color: #E8B828;\" />\n      <Pane layoutX=\"10.0\" layoutY=\"30.0\" prefHeight=\"20.0\" prefWidth=\"20.0\" style=\"-fx-background-color: red;\" />\n      <Pane layoutX=\"10.0\" layoutY=\"120.0\" prefHeight=\"20.0\" prefWidth=\"20.0\" style=\"-fx-background-color: blue;\" />\n      <Text layoutX=\"31.0\" layoutY=\"75.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"X2 Letter\" wrappingWidth=\"63.892091684827506\">\n         <font>\n            <Font size=\"14.0\" />\n         </font>\n      </Text>\n      <Text layoutX=\"31.0\" layoutY=\"45.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"X3 Word\" wrappingWidth=\"59.455723992607545\">\n         <font>\n            <Font size=\"14.0\" />\n         </font>\n      </Text>\n      <Text layoutX=\"31.0\" layoutY=\"106.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"X2 Word\" wrappingWidth=\"55.953369140625\">\n         <font>\n            <Font size=\"14.0\" />\n         </font>\n      </Text>\n      <Text layoutX=\"31.0\" layoutY=\"135.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"X3 Letter\" wrappingWidth=\"65.85350799560547\">\n         <font>\n            <Font size=\"14.0\" />\n         </font>\n      </Text>\n      <AnchorPane id=\"tiles-container\" fx:id=\"tilesContainer\" layoutX=\"100.0\" layoutY=\"710.0\" prefHeight=\"63.0\" prefWidth=\"391.0\">\n         <children>\n            <Button layoutX=\"100.0\" layoutY=\"7.0\" mnemonicParsing=\"false\" onAction=\"#handleTileButtonClick\" prefHeight=\"50.0\" prefWidth=\"40.0\" />\n            <Button layoutX=\"200.0\" layoutY=\"7.0\" mnemonicParsing=\"false\" onAction=\"#handleTileButtonClick\" prefHeight=\"50.0\" prefWidth=\"40.0\" />\n            <Button layoutY=\"7.0\" mnemonicParsing=\"false\" onAction=\"#handleTileButtonClick\" prefHeight=\"50.0\" prefWidth=\"40.0\" />\n            <Button layoutX=\"50.0\" layoutY=\"7.0\" mnemonicParsing=\"false\" onAction=\"#handleTileButtonClick\" prefHeight=\"50.0\" prefWidth=\"40.0\" />\n            <Button layoutX=\"150.0\" layoutY=\"7.0\" mnemonicParsing=\"false\" onAction=\"#handleTileButtonClick\" prefHeight=\"50.0\" prefWidth=\"40.0\" />\n            <Button layoutX=\"350.0\" layoutY=\"7.0\" mnemonicParsing=\"false\" onAction=\"#handleTileButtonClick\" prefHeight=\"50.0\" prefWidth=\"40.0\" />\n            <Button layoutX=\"250.0\" layoutY=\"7.0\" mnemonicParsing=\"false\" onAction=\"#handleTileButtonClick\" prefHeight=\"50.0\" prefWidth=\"40.0\" />\n            <Button layoutX=\"300.0\" layoutY=\"7.0\" mnemonicParsing=\"false\" onAction=\"#handleTileButtonClick\" prefHeight=\"50.0\" prefWidth=\"40.0\" />\n         </children>\n      </AnchorPane>\n      <Text fx:id=\"score\" layoutX=\"870.0\" layoutY=\"60.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" textAlignment=\"CENTER\" wrappingWidth=\"68.0\">\n         <font>\n            <Font size=\"32.0\" />\n         </font>\n      </Text>\n      <Button fx:id=\"TryPlaceWord\" layoutX=\"527.0\" layoutY=\"717.0\" mnemonicParsing=\"false\" onAction=\"#TryPlaceWordButtonClick\" prefHeight=\"50.0\" prefWidth=\"99.0\" text=\"Try place word\" />\n      <Button fx:id=\"resetWord\" layoutX=\"637.0\" layoutY=\"717.0\" mnemonicParsing=\"false\" onAction=\"#resetTilesButtonClick\" prefHeight=\"50.0\" prefWidth=\"80.0\" text=\"Reset word\" />\n      <Text fx:id=\"message\" fill=\"#720000\" layoutX=\"138.0\" layoutY=\"685.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" textAlignment=\"CENTER\" wrappingWidth=\"591.8666076660156\">\n         <font>\n            <Font size=\"21.0\" />\n         </font>\n      </Text>\n      <GridPane fx:id=\"boardGrid\" alignment=\"CENTER\" gridLinesVisible=\"true\" layoutX=\"100.0\" layoutY=\"30.0\" prefHeight=\"606.0\" prefWidth=\"668.0\" style=\"-fx-background-color: #228B22;\">\n         <columnConstraints>\n            <ColumnConstraints percentWidth=\"6.66667\" />\n            <ColumnConstraints percentWidth=\"6.66667\" />\n            <ColumnConstraints percentWidth=\"6.66667\" />\n            <ColumnConstraints percentWidth=\"6.66667\" />\n            <ColumnConstraints percentWidth=\"6.66667\" />\n            <ColumnConstraints percentWidth=\"6.66667\" />\n            <ColumnConstraints percentWidth=\"6.66667\" />\n            <ColumnConstraints percentWidth=\"6.66667\" />\n            <ColumnConstraints percentWidth=\"6.66667\" />\n            <ColumnConstraints percentWidth=\"6.66667\" />\n            <ColumnConstraints percentWidth=\"6.66667\" />\n            <ColumnConstraints percentWidth=\"6.66667\" />\n            <ColumnConstraints percentWidth=\"6.66667\" />\n            <ColumnConstraints percentWidth=\"6.66667\" />\n            <ColumnConstraints percentWidth=\"6.66667\" />\n         </columnConstraints>\n         <rowConstraints>\n            <RowConstraints percentHeight=\"6.66667\" />\n            <RowConstraints percentHeight=\"6.66667\" />\n            <RowConstraints percentHeight=\"6.66667\" />\n            <RowConstraints percentHeight=\"6.66667\" />\n            <RowConstraints percentHeight=\"6.66667\" />\n            <RowConstraints percentHeight=\"6.66667\" />\n            <RowConstraints percentHeight=\"6.66667\" />\n            <RowConstraints percentHeight=\"6.66667\" />\n            <RowConstraints percentHeight=\"6.66667\" />\n            <RowConstraints percentHeight=\"6.66667\" />\n            <RowConstraints percentHeight=\"6.66667\" />\n            <RowConstraints percentHeight=\"6.66667\" />\n            <RowConstraints percentHeight=\"6.66667\" />\n            <RowConstraints percentHeight=\"6.66667\" />\n            <RowConstraints percentHeight=\"6.66667\" />\n         </rowConstraints>\n         <children>\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: red;\" GridPane.columnIndex=\"0\" GridPane.rowIndex=\"0\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: red;\" GridPane.columnIndex=\"0\" GridPane.rowIndex=\"14\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: red;\" GridPane.columnIndex=\"0\" GridPane.rowIndex=\"7\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: red;\" GridPane.columnIndex=\"14\" GridPane.rowIndex=\"0\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: red;\" GridPane.columnIndex=\"14\" GridPane.rowIndex=\"7\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"54.0\" prefWidth=\"65.0\" style=\"-fx-background-color: red;\" GridPane.columnIndex=\"14\" GridPane.rowIndex=\"14\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: red;\" GridPane.columnIndex=\"7\" GridPane.rowIndex=\"0\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: red;\" GridPane.columnIndex=\"7\" GridPane.rowIndex=\"14\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color:  #E8B828;\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"1\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color:  #E8B828;\" GridPane.columnIndex=\"2\" GridPane.rowIndex=\"2\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color:  #E8B828;\" GridPane.columnIndex=\"3\" GridPane.rowIndex=\"3\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color:  #E8B828;\" GridPane.columnIndex=\"4\" GridPane.rowIndex=\"4\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color:  #E8B828;\" GridPane.columnIndex=\"13\" GridPane.rowIndex=\"1\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color:  #E8B828;\" GridPane.columnIndex=\"12\" GridPane.rowIndex=\"2\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color:  #E8B828;\" GridPane.columnIndex=\"11\" GridPane.rowIndex=\"3\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color:  #E8B828;\" GridPane.columnIndex=\"10\" GridPane.rowIndex=\"4\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color:  #E8B828;\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"13\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color:  #E8B828;\" GridPane.columnIndex=\"2\" GridPane.rowIndex=\"12\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color:  #E8B828;\" GridPane.columnIndex=\"3\" GridPane.rowIndex=\"11\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color:  #E8B828;\" GridPane.columnIndex=\"4\" GridPane.rowIndex=\"10\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color:  #E8B828;\" GridPane.columnIndex=\"13\" GridPane.rowIndex=\"13\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color:  #E8B828;\" GridPane.columnIndex=\"12\" GridPane.rowIndex=\"12\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #E8B828;\" GridPane.columnIndex=\"11\" GridPane.rowIndex=\"11\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color:  #E8B828;\" GridPane.columnIndex=\"10\" GridPane.rowIndex=\"10\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"3\" GridPane.rowIndex=\"0\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"11\" GridPane.rowIndex=\"0\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"3\" GridPane.rowIndex=\"14\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"11\" GridPane.rowIndex=\"14\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"0\" GridPane.rowIndex=\"3\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"0\" GridPane.rowIndex=\"11\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"14\" GridPane.rowIndex=\"3\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"14\" GridPane.rowIndex=\"11\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"6\" GridPane.rowIndex=\"2\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"8\" GridPane.rowIndex=\"2\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"2\" GridPane.rowIndex=\"8\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"2\" GridPane.rowIndex=\"6\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"12\" GridPane.rowIndex=\"8\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"12\" GridPane.rowIndex=\"6\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"8\" GridPane.rowIndex=\"12\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"6\" GridPane.rowIndex=\"12\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"7\" GridPane.rowIndex=\"3\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"3\" GridPane.rowIndex=\"7\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"11\" GridPane.rowIndex=\"7\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"7\" GridPane.rowIndex=\"11\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"6\" GridPane.rowIndex=\"8\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"6\" GridPane.rowIndex=\"6\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"8\" GridPane.rowIndex=\"6\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"8\" GridPane.rowIndex=\"8\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: blue;\" GridPane.columnIndex=\"5\" GridPane.rowIndex=\"5\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: blue;\" GridPane.columnIndex=\"9\" GridPane.rowIndex=\"5\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: blue;\" GridPane.columnIndex=\"9\" GridPane.rowIndex=\"9\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: blue;\" GridPane.columnIndex=\"5\" GridPane.rowIndex=\"9\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: blue;\" GridPane.columnIndex=\"5\" GridPane.rowIndex=\"13\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: blue;\" GridPane.columnIndex=\"9\" GridPane.rowIndex=\"13\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: blue;\" GridPane.columnIndex=\"13\" GridPane.rowIndex=\"9\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: blue;\" GridPane.columnIndex=\"13\" GridPane.rowIndex=\"5\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: blue;\" GridPane.columnIndex=\"5\" GridPane.rowIndex=\"1\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: blue;\" GridPane.columnIndex=\"9\" GridPane.rowIndex=\"1\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: blue;\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"5\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: blue;\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"9\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: purple;\" GridPane.columnIndex=\"7\" GridPane.rowIndex=\"7\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"0\" GridPane.rowIndex=\"1\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"0\" GridPane.rowIndex=\"2\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"0\" GridPane.rowIndex=\"4\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"0\" GridPane.rowIndex=\"5\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"0\" GridPane.rowIndex=\"6\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"0\" GridPane.rowIndex=\"8\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"0\" GridPane.rowIndex=\"9\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"0\" GridPane.rowIndex=\"10\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"0\" GridPane.rowIndex=\"12\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"0\" GridPane.rowIndex=\"13\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"0\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"2\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"3\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"4\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"6\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"7\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"8\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"10\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"11\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"12\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"14\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"2\" GridPane.rowIndex=\"0\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"2\" GridPane.rowIndex=\"14\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"2\" GridPane.rowIndex=\"13\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"2\" GridPane.rowIndex=\"11\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"2\" GridPane.rowIndex=\"10\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"2\" GridPane.rowIndex=\"9\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"2\" GridPane.rowIndex=\"7\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"2\" GridPane.rowIndex=\"5\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"2\" GridPane.rowIndex=\"4\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"2\" GridPane.rowIndex=\"3\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"2\" GridPane.rowIndex=\"1\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"3\" GridPane.rowIndex=\"1\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"3\" GridPane.rowIndex=\"2\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"3\" GridPane.rowIndex=\"4\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"3\" GridPane.rowIndex=\"5\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"3\" GridPane.rowIndex=\"6\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"3\" GridPane.rowIndex=\"8\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"3\" GridPane.rowIndex=\"9\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"3\" GridPane.rowIndex=\"10\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"3\" GridPane.rowIndex=\"12\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"3\" GridPane.rowIndex=\"13\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"4\" GridPane.rowIndex=\"0\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"4\" GridPane.rowIndex=\"1\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"4\" GridPane.rowIndex=\"2\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"4\" GridPane.rowIndex=\"3\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"4\" GridPane.rowIndex=\"5\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"4\" GridPane.rowIndex=\"6\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"4\" GridPane.rowIndex=\"7\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"4\" GridPane.rowIndex=\"8\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"4\" GridPane.rowIndex=\"9\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"4\" GridPane.rowIndex=\"11\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"4\" GridPane.rowIndex=\"12\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"4\" GridPane.rowIndex=\"13\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"4\" GridPane.rowIndex=\"14\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"5\" GridPane.rowIndex=\"0\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"5\" GridPane.rowIndex=\"2\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"5\" GridPane.rowIndex=\"14\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"5\" GridPane.rowIndex=\"3\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"5\" GridPane.rowIndex=\"4\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"5\" GridPane.rowIndex=\"6\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"5\" GridPane.rowIndex=\"7\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"5\" GridPane.rowIndex=\"8\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"5\" GridPane.rowIndex=\"10\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"5\" GridPane.rowIndex=\"11\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"5\" GridPane.rowIndex=\"12\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"6\" GridPane.rowIndex=\"0\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"6\" GridPane.rowIndex=\"1\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"6\" GridPane.rowIndex=\"2\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"6\" GridPane.rowIndex=\"4\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"6\" GridPane.rowIndex=\"5\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"6\" GridPane.rowIndex=\"7\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"6\" GridPane.rowIndex=\"9\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"6\" GridPane.rowIndex=\"10\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"6\" GridPane.rowIndex=\"11\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"6\" GridPane.rowIndex=\"13\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"6\" GridPane.rowIndex=\"14\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"7\" GridPane.rowIndex=\"1\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"7\" GridPane.rowIndex=\"2\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"7\" GridPane.rowIndex=\"4\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"7\" GridPane.rowIndex=\"5\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"7\" GridPane.rowIndex=\"6\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"7\" GridPane.rowIndex=\"8\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"7\" GridPane.rowIndex=\"9\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"7\" GridPane.rowIndex=\"10\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"7\" GridPane.rowIndex=\"12\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"7\" GridPane.rowIndex=\"13\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"8\" GridPane.rowIndex=\"0\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"8\" GridPane.rowIndex=\"1\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"8\" GridPane.rowIndex=\"2\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"8\" GridPane.rowIndex=\"4\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"8\" GridPane.rowIndex=\"5\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"8\" GridPane.rowIndex=\"7\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"8\" GridPane.rowIndex=\"9\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"8\" GridPane.rowIndex=\"10\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"8\" GridPane.rowIndex=\"11\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"8\" GridPane.rowIndex=\"13\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"8\" GridPane.rowIndex=\"14\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"9\" GridPane.rowIndex=\"0\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"9\" GridPane.rowIndex=\"2\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"9\" GridPane.rowIndex=\"14\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"9\" GridPane.rowIndex=\"3\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"9\" GridPane.rowIndex=\"4\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"9\" GridPane.rowIndex=\"6\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"9\" GridPane.rowIndex=\"7\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"9\" GridPane.rowIndex=\"8\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"9\" GridPane.rowIndex=\"10\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"9\" GridPane.rowIndex=\"11\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"9\" GridPane.rowIndex=\"12\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"10\" GridPane.rowIndex=\"0\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"10\" GridPane.rowIndex=\"1\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"10\" GridPane.rowIndex=\"2\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"10\" GridPane.rowIndex=\"3\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"10\" GridPane.rowIndex=\"5\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"10\" GridPane.rowIndex=\"6\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"10\" GridPane.rowIndex=\"7\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"10\" GridPane.rowIndex=\"8\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"10\" GridPane.rowIndex=\"9\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"10\" GridPane.rowIndex=\"11\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"10\" GridPane.rowIndex=\"12\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"10\" GridPane.rowIndex=\"13\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"10\" GridPane.rowIndex=\"14\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"11\" GridPane.rowIndex=\"1\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"11\" GridPane.rowIndex=\"2\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"11\" GridPane.rowIndex=\"4\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"11\" GridPane.rowIndex=\"5\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"11\" GridPane.rowIndex=\"6\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"11\" GridPane.rowIndex=\"8\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"11\" GridPane.rowIndex=\"9\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"11\" GridPane.rowIndex=\"10\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"11\" GridPane.rowIndex=\"12\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"11\" GridPane.rowIndex=\"13\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"12\" GridPane.rowIndex=\"0\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"12\" GridPane.rowIndex=\"14\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"12\" GridPane.rowIndex=\"13\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"12\" GridPane.rowIndex=\"11\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"12\" GridPane.rowIndex=\"10\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"12\" GridPane.rowIndex=\"9\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"12\" GridPane.rowIndex=\"7\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"12\" GridPane.rowIndex=\"5\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"12\" GridPane.rowIndex=\"4\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"12\" GridPane.rowIndex=\"3\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"12\" GridPane.rowIndex=\"1\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"13\" GridPane.rowIndex=\"2\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"13\" GridPane.rowIndex=\"3\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"13\" GridPane.rowIndex=\"4\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"13\" GridPane.rowIndex=\"6\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"13\" GridPane.rowIndex=\"7\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"13\" GridPane.rowIndex=\"8\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"13\" GridPane.rowIndex=\"10\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"13\" GridPane.rowIndex=\"11\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"13\" GridPane.rowIndex=\"12\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"13\" GridPane.rowIndex=\"14\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"14\" GridPane.rowIndex=\"1\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"14\" GridPane.rowIndex=\"2\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"14\" GridPane.rowIndex=\"4\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"14\" GridPane.rowIndex=\"5\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"14\" GridPane.rowIndex=\"6\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"14\" GridPane.rowIndex=\"8\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"14\" GridPane.rowIndex=\"9\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"14\" GridPane.rowIndex=\"10\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"14\" GridPane.rowIndex=\"12\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"14\" GridPane.rowIndex=\"13\" />\n\n               </children>\n      </GridPane>\n   </children>\n</AnchorPane>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/classes/view/Board-view.fxml b/target/classes/view/Board-view.fxml
--- a/target/classes/view/Board-view.fxml	(revision 537d14922ab5ff5841b76148a35a4be06db1e97b)
+++ b/target/classes/view/Board-view.fxml	(date 1687705003953)
@@ -9,16 +9,16 @@
 <?import javafx.scene.text.Font?>
 <?import javafx.scene.text.Text?>
 
-<AnchorPane fx:id="anchorPane" maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="790.0" prefWidth="952.0" style="-fx-background-color: #EDEADE;" xmlns="http://javafx.com/javafx/19" xmlns:fx="http://javafx.com/fxml/1" fx:controller="view.BoardViewController">
+<AnchorPane fx:id="anchorPane" maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="650.0" prefWidth="878.0" style="-fx-background-color: #EDEADE;" xmlns="http://javafx.com/javafx/19" xmlns:fx="http://javafx.com/fxml/1" fx:controller="view.BoardViewController">
    <children>
-      <Button fx:id="EndTurn" layoutX="728.0" layoutY="717.0" mnemonicParsing="false" onAction="#EndTurnButtonClick" prefHeight="50.0" prefWidth="68.0" stylesheets="@../css/button.css" text="End Turn" />
-      <Button fx:id="EndGame" layoutX="862.0" layoutY="717.0" mnemonicParsing="false" onAction="#EndGameButtonClick" prefHeight="50.0" prefWidth="77.0" text="End Game" />
-      <Text layoutX="779.0" layoutY="60.0" strokeType="OUTSIDE" strokeWidth="0.0" text="Score:" textAlignment="CENTER" wrappingWidth="91.00000000000011">
+      <Button fx:id="EndTurn" layoutX="703.0" layoutY="591.0" mnemonicParsing="false" onAction="#EndTurnButtonClick" prefHeight="50.0" prefWidth="68.0" stylesheets="@../css/button.css" text="End Turn" />
+      <Button fx:id="EndGame" layoutX="8.0" layoutY="161.0" mnemonicParsing="false" onAction="#EndGameButtonClick" prefHeight="50.0" prefWidth="77.0" text="End Game" />
+      <Text layoutX="713.0" layoutY="59.0" strokeType="OUTSIDE" strokeWidth="0.0" text="Score:" textAlignment="CENTER" wrappingWidth="91.00000000000011">
          <font>
             <Font size="32.0" />
          </font>
       </Text>
-      <Text layoutX="10.0" layoutY="750.0" strokeType="OUTSIDE" strokeWidth="0.0" text="Tiles:" textAlignment="CENTER" wrappingWidth="84.16746520996094">
+      <Text layoutX="10.0" layoutY="624.0" strokeType="OUTSIDE" strokeWidth="0.0" text="Tiles:" textAlignment="CENTER" wrappingWidth="84.16746520996094">
          <font>
             <Font size="32.0" />
          </font>
@@ -47,7 +47,7 @@
             <Font size="14.0" />
          </font>
       </Text>
-      <AnchorPane id="tiles-container" fx:id="tilesContainer" layoutX="100.0" layoutY="710.0" prefHeight="63.0" prefWidth="391.0">
+      <AnchorPane id="tiles-container" fx:id="tilesContainer" layoutX="100.0" layoutY="584.0" prefHeight="63.0" prefWidth="391.0">
          <children>
             <Button layoutX="100.0" layoutY="7.0" mnemonicParsing="false" onAction="#handleTileButtonClick" prefHeight="50.0" prefWidth="40.0" />
             <Button layoutX="200.0" layoutY="7.0" mnemonicParsing="false" onAction="#handleTileButtonClick" prefHeight="50.0" prefWidth="40.0" />
@@ -59,19 +59,19 @@
             <Button layoutX="300.0" layoutY="7.0" mnemonicParsing="false" onAction="#handleTileButtonClick" prefHeight="50.0" prefWidth="40.0" />
          </children>
       </AnchorPane>
-      <Text fx:id="score" layoutX="870.0" layoutY="60.0" strokeType="OUTSIDE" strokeWidth="0.0" textAlignment="CENTER" wrappingWidth="68.0">
+      <Text fx:id="score" layoutX="804.0" layoutY="59.0" strokeType="OUTSIDE" strokeWidth="0.0" textAlignment="CENTER" wrappingWidth="68.0">
          <font>
             <Font size="32.0" />
          </font>
       </Text>
-      <Button fx:id="TryPlaceWord" layoutX="527.0" layoutY="717.0" mnemonicParsing="false" onAction="#TryPlaceWordButtonClick" prefHeight="50.0" prefWidth="99.0" text="Try place word" />
-      <Button fx:id="resetWord" layoutX="637.0" layoutY="717.0" mnemonicParsing="false" onAction="#resetTilesButtonClick" prefHeight="50.0" prefWidth="80.0" text="Reset word" />
-      <Text fx:id="message" fill="#720000" layoutX="138.0" layoutY="685.0" strokeType="OUTSIDE" strokeWidth="0.0" textAlignment="CENTER" wrappingWidth="591.8666076660156">
+      <Button fx:id="TryPlaceWord" layoutX="502.0" layoutY="591.0" mnemonicParsing="false" onAction="#TryPlaceWordButtonClick" prefHeight="50.0" prefWidth="99.0" text="Try place word" />
+      <Button fx:id="resetWord" layoutX="612.0" layoutY="591.0" mnemonicParsing="false" onAction="#resetTilesButtonClick" prefHeight="50.0" prefWidth="80.0" text="Reset word" />
+      <Text fx:id="message" fill="#720000" layoutX="100.0" layoutY="566.0" strokeType="OUTSIDE" strokeWidth="0.0" textAlignment="CENTER" wrappingWidth="600.733154296875">
          <font>
             <Font size="21.0" />
          </font>
       </Text>
-      <GridPane fx:id="boardGrid" alignment="CENTER" gridLinesVisible="true" layoutX="100.0" layoutY="30.0" prefHeight="606.0" prefWidth="668.0" style="-fx-background-color: #228B22;">
+      <GridPane fx:id="boardGrid" alignment="CENTER" gridLinesVisible="true" layoutX="100.0" layoutY="30.0" prefHeight="500.0" prefWidth="600.0" style="-fx-background-color: #228B22;">
          <columnConstraints>
             <ColumnConstraints percentWidth="6.66667" />
             <ColumnConstraints percentWidth="6.66667" />
@@ -311,6 +311,7 @@
             <Pane onMouseClicked="#handlePaneClick" prefHeight="200.0" prefWidth="200.0" GridPane.columnIndex="12" GridPane.rowIndex="4" />
             <Pane onMouseClicked="#handlePaneClick" prefHeight="200.0" prefWidth="200.0" GridPane.columnIndex="12" GridPane.rowIndex="3" />
             <Pane onMouseClicked="#handlePaneClick" prefHeight="200.0" prefWidth="200.0" GridPane.columnIndex="12" GridPane.rowIndex="1" />
+            <Pane onMouseClicked="#handlePaneClick" prefHeight="200.0" prefWidth="200.0" GridPane.columnIndex="13" GridPane.rowIndex="0" />
             <Pane onMouseClicked="#handlePaneClick" prefHeight="200.0" prefWidth="200.0" GridPane.columnIndex="13" GridPane.rowIndex="2" />
             <Pane onMouseClicked="#handlePaneClick" prefHeight="200.0" prefWidth="200.0" GridPane.columnIndex="13" GridPane.rowIndex="3" />
             <Pane onMouseClicked="#handlePaneClick" prefHeight="200.0" prefWidth="200.0" GridPane.columnIndex="13" GridPane.rowIndex="4" />
@@ -334,5 +335,6 @@
 
                </children>
       </GridPane>
+      <Button fx:id="challenge" layoutX="781.0" layoutY="591.0" mnemonicParsing="false" onAction="#challengeButtonClick" prefHeight="50.0" prefWidth="84.0" stylesheets="@../css/button.css" text="Challenge" />
    </children>
-</AnchorPane>
\ No newline at end of file
+</AnchorPane>
Index: src/main/java/model/logic/Guest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model.logic;\n\nimport com.google.gson.JsonObject;\nimport model.data.Tile;\nimport model.data.Tile.Bag;\nimport model.data.Word;\n\nimport java.io.*;\nimport java.net.Socket;\nimport java.util.Observable;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.LinkedBlockingQueue;\n\npublic class Guest extends Observable{\n    //Logic Members\n    private Socket SocketToHost;\n    private BufferedReader reader;\n    private PrintWriter writer;\n    private String ipAddress;\n    Host HostServer; // The Host this Guest connected to\n    static ExecutorService executorService = Executors.newFixedThreadPool(8); // only for one host\n    BlockingQueue<String> inputQueue = new LinkedBlockingQueue<>();\n\n\n    //Data-Game Members\n    public Player player;\n    public String NickName;\n\n\n    public Guest(String NickName){\n        this.NickName = NickName;\n    }\n\n    public Socket getSocketToHost() {\n        return SocketToHost;\n    }\n    public String getNickName() {\n        return NickName;\n    }\n    public BufferedReader getReader() {\n        return reader;\n    }\n\n    public PrintWriter getWriter() {\n        return writer;\n    }\n\n    public String getIpAddress() {\n        return ipAddress;\n    }\n\n    public void CreateProfile(String NickName){\n        this.NickName = NickName;\n\n        // add Photo or avatar\n    }\n\n    public void CreateSocketToHost(String HostIp, int Port) throws IOException {\n        if (this.validateIP(HostIp)){\n            this.SocketToHost = new Socket(HostIp, Port);\n            this.reader = new BufferedReader(new InputStreamReader(SocketToHost.getInputStream()));\n            this.writer = new PrintWriter(SocketToHost.getOutputStream(), true);\n            this.ipAddress = SocketToHost.getInetAddress().getHostAddress();\n            executorService.submit(this::handleRequests);\n\n            executorService.execute(()->{\n                try {\n                    handleHost(this.SocketToHost.getInputStream(), this.SocketToHost.getOutputStream());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            });\n        }\n        else {\n            System.out.println(this.NickName + \" can't connect to host\");\n        }\n    }\n\n    // create all options Messages\n    public void SendTryPlaceWordMessage(String source, String destination, String word,\n                                          int row, int column, boolean vertical){\n        System.out.println(this.player.getNickName()+\": try place word\");\n//        if(!this.player.usingCurrentTiles(word)){\n//            System.out.println(\"You are not using your tiles\");\n//        }\n//        else{\n            StringBuilder stringBuilder = new StringBuilder();\n            stringBuilder.append(this.SocketToHost.getInetAddress());\n            stringBuilder.append(\":\");\n            stringBuilder.append(this.SocketToHost.getLocalPort());\n            String socketSource = stringBuilder.toString();\n            MessageHandler messageHandler = new MessageHandler();\n            messageHandler.CreateTryPlaceWordMessage(source, destination, word, this.player.prevScore,row, column,\n                    vertical, this.player.getCurrentTiles(), socketSource);\n            this.SendToHost(messageHandler.jsonHandler);\n//        }\n    }\n    public void SendChallengeMessage(String source, String destination, String word,\n                                       int row, int column, boolean vertical){\n        StringBuilder stringBuilder = new StringBuilder();\n        stringBuilder.append(this.SocketToHost.getInetAddress());\n        stringBuilder.append(\":\");\n        stringBuilder.append(this.SocketToHost.getLocalPort());\n        String socketSource = stringBuilder.toString();\n        MessageHandler messageHandler = new MessageHandler();\n        messageHandler.CreateChallengeMessage(source, destination, word, row, column,\n                vertical, this.player.getCurrentTiles(), socketSource);\n        this.SendToHost(messageHandler.jsonHandler);\n    }\n\n    public void sendPassTurnMessage() {\n\n        StringBuilder stringBuilder = new StringBuilder();\n        stringBuilder.append(this.SocketToHost.getInetAddress());\n        stringBuilder.append(\":\");\n        stringBuilder.append(this.SocketToHost.getLocalPort());\n        MessageHandler messageHandler = new MessageHandler();\n        messageHandler.createPassTurnMessage();\n        this.SendToHost(messageHandler.jsonHandler);\n    }\n\n    public  void SendToHost(JsonHandler json) {\n        this.writer.println(json.toJsonString());\n        this.writer.flush();\n    }\n\n    // option d in {}\n    public void handleHost(InputStream inputStream, OutputStream outputStream) {\n        while (!this.SocketToHost.isClosed()) {\n            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));\n            try {\n                String jsonString = bufferedReader.readLine();\n                if (jsonString != null)// Read an object from the server\n                {\n                    try {\n                        inputQueue.put(jsonString); // Put the received object in the queue\n                    } catch (InterruptedException e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n            }  catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n        }\n    }\n\n    public void handleRequests() {\n        while (!this.SocketToHost.isClosed()) {\n            try {\n                String jsonString = inputQueue.take(); //blocking call\n                System.out.println(jsonString);\n                JsonObject json = JsonHandler.convertStringToJsonObject(jsonString);\n                switch (json.get(\"MessageType\").getAsString()){\n                    case \"start game\":\n                        this.player = new Player(this.ipAddress, this.NickName, 0);\n                        this.player.addTiles(json.get(\"StartTiles\").getAsString());\n                        this.player.hostNickName = json.get(\"Source\").getAsString();\n                        this.player.playerIndex = json.get(\"PlayerIndex\").getAsInt();\n                        this.player.setNumOfPlayersInGame(json.get(\"NumOfPlayers\").getAsInt());\n                        setChanged();\n                        notifyObservers(\"start game,\" + this.player.getHostNickName());\n                        break;\n                    case \"success\":\n                        switch (json.get(\"Action\").getAsString()) {\n                            case \"try place word\":\n                                System.out.println(this.NickName + \"Try Place Word: \" + \"Success\");\n                                this.player.addScore(Integer.parseInt(json.get(\"NewScore\").getAsString()));\n                                this.player.setCurrentTiles(json.get(\"NewCurrentTiles\").getAsString());\n                                // board change in Host.notifyall\n                                break;\n                            case \"challenge\":\n                                System.out.println(this.NickName + \"Challenge: \" + \"Success\");\n                                // score don't change\n                                // board change in Host.notifyall\n                                break;\n                        }\n                        break;\n                    case \"try again\":\n                        switch (json.get(\"Action\").getAsString()){\n                            case \"try place word\":\n                                System.out.println(this.NickName + \"Try Place Word: \"+ \"Didn't success, try again\");\n                                break;\n                            case \"challenge\":\n                                System.out.println(this.NickName + \"Challenge: \"+ \"Didn't success, try again\");\n                                break;\n                        }\n                        break;\n                    case \"succeeded in challenging you\":\n                        System.out.println(this.NickName + \": i have been complicated\");\n                        this.player.currentScore = json.get(\"PrevScore\").getAsInt();\n                        this.player.prevScore = json.get(\"PrevScore\").getAsInt();\n                        this.player.currentBoard = this.player.prevBoard;\n                        this.player.currentTiles = this.player.prevTiles;\n                        setChanged();\n                        notifyObservers(\"challenge success\");\n                        break;\n                    case \"update board\":\n                        this.player.setCurrentBoard(json.get(\"Board\").getAsString());\n                        setChanged();\n                        notifyObservers(\"update board\");\n                        System.out.println(this.NickName + \" updated Board\");\n                        break;\n                    case \"pass turn\":\n                        setChanged();\n                        notifyObservers(\"pass turn\");\n                        break;\n                    case \"end game\":\n                        System.out.println(\"End Game\");\n                        Thread.sleep(5000);\n                        System.exit(0);\n                        break;\n                }\n\n            } catch (InterruptedException e) {\n                throw new RuntimeException(e);\n            }\n        }\n    }\n\n    public boolean validateIP(String ipAddress) {\n        String[] parts = ipAddress.split(\"\\\\.\");\n\n        if (parts.length != 4) {\n            return false;\n        }\n\n        for (String part : parts) {\n            try {\n                int value = Integer.parseInt(part);\n                if (value < 0 || value > 255) {\n                    return false;\n                }\n            } catch (NumberFormatException e) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n\n    /**\n     * The Disconnect function is used to disconnect the client from the server.\n     * It closes all of the streams and sockets that were opened during connection,\n     * and removes itself from its host's guest list.\n\n     *\n     *\n     * @return A boolean\n     *\n     * @docauthor Trelent\n     */\n    public void Disconnect(){\n        executorService.shutdownNow();\n        if (HostServer != null) {\n            for (Socket host : HostServer.GuestList) {\n                if(host.getPort()==SocketToHost.getLocalPort()) {\n                    HostServer.GuestList.remove(host);\n                    break;\n                }\n            }\n        }\n        try {\n            if (reader != null) {\n                reader.close();\n            }\n            if (writer != null) {\n                writer.close();\n            }\n            if (SocketToHost != null) {\n                SocketToHost.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/model/logic/Guest.java b/src/main/java/model/logic/Guest.java
--- a/src/main/java/model/logic/Guest.java	(revision 537d14922ab5ff5841b76148a35a4be06db1e97b)
+++ b/src/main/java/model/logic/Guest.java	(date 1687708872507)
@@ -80,33 +80,31 @@
 
     // create all options Messages
     public void SendTryPlaceWordMessage(String source, String destination, String word,
-                                          int row, int column, boolean vertical){
+                                        int row, int column, boolean vertical){
         System.out.println(this.player.getNickName()+": try place word");
 //        if(!this.player.usingCurrentTiles(word)){
 //            System.out.println("You are not using your tiles");
 //        }
 //        else{
-            StringBuilder stringBuilder = new StringBuilder();
-            stringBuilder.append(this.SocketToHost.getInetAddress());
-            stringBuilder.append(":");
-            stringBuilder.append(this.SocketToHost.getLocalPort());
-            String socketSource = stringBuilder.toString();
-            MessageHandler messageHandler = new MessageHandler();
-            messageHandler.CreateTryPlaceWordMessage(source, destination, word, this.player.prevScore,row, column,
-                    vertical, this.player.getCurrentTiles(), socketSource);
-            this.SendToHost(messageHandler.jsonHandler);
+        StringBuilder stringBuilder = new StringBuilder();
+        stringBuilder.append(this.SocketToHost.getInetAddress());
+        stringBuilder.append(":");
+        stringBuilder.append(this.SocketToHost.getLocalPort());
+        String socketSource = stringBuilder.toString();
+        MessageHandler messageHandler = new MessageHandler();
+        messageHandler.CreateTryPlaceWordMessage(source, destination, word, this.player.prevScore,row, column,
+                vertical, this.player.getCurrentTiles(), socketSource);
+        this.SendToHost(messageHandler.jsonHandler);
 //        }
     }
-    public void SendChallengeMessage(String source, String destination, String word,
-                                       int row, int column, boolean vertical){
+    public void SendChallengeMessage(){
         StringBuilder stringBuilder = new StringBuilder();
         stringBuilder.append(this.SocketToHost.getInetAddress());
         stringBuilder.append(":");
         stringBuilder.append(this.SocketToHost.getLocalPort());
         String socketSource = stringBuilder.toString();
         MessageHandler messageHandler = new MessageHandler();
-        messageHandler.CreateChallengeMessage(source, destination, word, row, column,
-                vertical, this.player.getCurrentTiles(), socketSource);
+        messageHandler.CreateChallengeMessage(socketSource);
         this.SendToHost(messageHandler.jsonHandler);
     }
 
@@ -211,6 +209,10 @@
                         Thread.sleep(5000);
                         System.exit(0);
                         break;
+                    case "challenge alive":
+                        setChanged();
+                        notifyObservers("challenge alive");
+                        break;
                 }
 
             } catch (InterruptedException e) {
Index: src/main/java/model/logic/Host.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model.logic;\n\nimport com.google.gson.JsonObject;\nimport model.data.Tile;\nimport model.data.Word;\nimport model.data.Board;\n\n\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\nimport java.util.concurrent.*;\n\npublic class Host extends Observable implements ClientHandler{\n    //Logic Members\n    int Port;\n    String IP;\n    ServerSocket LocalServer;\n    Socket HostSocketToLocalServer;\n    boolean Stop;\n    Socket currentSuccessMessageSocket;\n    String currentSuccessMessagePrevScore;\n\n    final int MaxGuests = 4;\n    public List<Socket> GuestList;\n    Socket SocketToMyServer;\n\n    public Future<String> getStringFuture() {\n        return stringFuture;\n    }\n\n    public void setStringFuture(Future<String> stringFuture) {\n        this.stringFuture = stringFuture;\n    }\n\n    public Future<String> stringFuture ;\n    MyServer GameServer; // The MyServer this host connected to\n    static ExecutorService executorService = Executors.newFixedThreadPool(10); // only for one host\n    BlockingQueue<String> inputQueue = new LinkedBlockingQueue<>();\n    public BlockingQueue<String> inputQueueFromGameServer = new LinkedBlockingQueue<>();\n\n\n    //Data-Game Members\n    public String NickName;\n    public Tile.Bag bag;\n    public Guest hostPlayer;\n    public Player player;\n    Board board ; // singleton and get instance model\n    private BufferedReader reader;\n    private PrintWriter writer;\n\n    //Default CTOR\n    /**\n     * The Host function is the main function of the Host class.\n     * It creates a new thread that listens for incoming connections from clients, and then adds them to an ArrayList of guests.\n     * The host also has a nickname, which can be changed by calling setNickName().\n\n     *\n     *\n     * @return A string with the host's nickname and port number\n     *\n     * @docauthor Trelent\n     */\n    public Host(){\n        this.board = Board.getBoardModel();\n        this.bag = Tile.Bag.getBagModel();\n        this.Port = GeneratePort();\n        this.Stop = false;\n        this.GuestList =new ArrayList<>();\n        this.NickName=\"Host \"+ getPort();\n        this.hostPlayer = new Guest(NickName);\n    }\n\n    private static class HostModelHelper {\n        public static final Host model_instance = new Host();\n    }\n\n    /**\n     * The getModel function is a static function that returns the model instance of the Host class.\n     *\n     *\n     *\n     * @return The model_instance variable\n     *\n     * @docauthor Trelent\n     */\n    public static Host getModel() {\n        return HostModelHelper.model_instance;\n    }\n    /**\n     * The getPort function returns the port number of the server.\n     *\n     *\n     *\n     * @return The port number\n     *\n     * @docauthor Trelent\n     */\n    public int getPort() {\n        return Port;\n    }\n\n    /**\n     * The getIpAddress function returns the IP address of the server.\n     *\n     *\n     *\n     * @return The ip address of the computer\n     *\n     * @docauthor Trelent\n     */\n    public String getIpAddress() {\n        return IP;\n    }\n\n    /**\n     * The getNickName function returns the NickName of the user.\n     *\n     *\n     *\n     * @return The nickname variable\n     *\n     * @docauthor Trelent\n     */\n    public String getNickName() {\n        return NickName;\n    }\n\n    /**\n     * The getServer function returns the server socket that is created in the constructor.\n     *\n     *\n     *\n     * @return The server socket\n     *\n     * @docauthor Trelent\n     */\n    public ServerSocket getServer() {\n        return LocalServer;\n    }\n\n    public Socket getSocketToMyServer() {\n        return SocketToMyServer;\n    }\n\n    //Connects Host to Main Server\n    /**\n     * The CreateSocketToServer function creates a socket to the server.\n     *\n     *\n     * @param  server Get the ip and port of the server\n     *\n     * @return A socket to the server\n     *\n     * @docauthor Trelent\n     */\n    public void CreateSocketToServer(MyServer server) throws IOException {\n        GameServer=server;\n        this.SocketToMyServer = new Socket(server.getIP(), server.getPort());\n//        executorService.submit(this::HandleMessageFromGameServer);\n\n        executorService.execute(()->{\n            try {\n                handleGameServer(this.SocketToMyServer.getInputStream(), this.SocketToMyServer.getOutputStream());\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n        });\n\n        System.out.println(\"Host Connected to Main Server\");\n    }\n    /**\n     * The CreateSocketToLocalServer function creates a socket to the local server.\n     *\n     *\n     * @param  HostIp Connect to the local server\n     * @param  Port Connect to the local server\n    public void createsockettolocalserver(int port) throws ioexception {\n            this\n     *\n     * @return A socket\n     *\n     * @docauthor Trelent\n     */\n    public void CreateSocketToLocalServer(String HostIp, int Port) throws IOException {\n        this.hostPlayer.CreateSocketToHost(HostIp,Port);\n        System.out.println(\"Host Connected to local Host Server\");\n    }\n\n    /**\n     * The CreateProfile function creates a profile for the user.\n     *\n     *\n     * @param  NickName Set the nickname of the profile\n     *\n     * @return A boolean value\n     *\n     * @docauthor Trelent\n     */\n    public void CreateProfile(String NickName){\n        this.NickName = NickName;\n        // add Photo or avatar\n    }\n\n    //start Host server\n    /**\n     * The start function creates a new thread and runs the runServer function in it.\n     * This is done so that the server can be running in the background while other functions are being executed.\n\n     *\n     *\n     * @return Void, so the server is running in the background\n     *\n     * @docauthor Trelent\n     */\n    public void start() {\n\n        executorService.execute(()->{\n            try {\n                runServer();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        });\n    }\n\n    private String getLocalNetworkAddress() throws SocketException {\n        Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();\n        while (interfaces.hasMoreElements()) {\n            NetworkInterface iface = interfaces.nextElement();\n            // filters out 127.0.0.1 and inactive interfaces\n            if (iface.isLoopback() || !iface.isUp())\n                continue;\n\n            Enumeration<InetAddress> addresses = iface.getInetAddresses();\n            while(addresses.hasMoreElements()) {\n                InetAddress addr = addresses.nextElement();\n                if (addr instanceof Inet4Address) return addr.getHostAddress();\n            }\n        }\n        return null;  // or throw an exception\n    }\n\n    /**\n     * The runServer function is the main function of the server.\n     * It opens a socket with a given port and waits for clients to connect.\n     * When it receives a client, it adds him to its list of guests and starts handling his requests in another thread.\n\n     *\n     *\n     * @return A void\n     *\n     * @docauthor Trelent\n     */\n    public void runServer() throws IOException {\n\n\n        //open server with the port that given\n//        this.LocalServer = new ServerSocket(this.Port,4, InetAddress.getLocalHost());\n        this.LocalServer = new ServerSocket(this.Port, 0, InetAddress.getByName(\"0.0.0.0\"));\n        executorService.submit(this::handleRequests);\n//        this.IP = this.LocalServer.getInetAddress().getHostAddress();\n        this.IP = this.getLocalNetworkAddress();  // The method to get your local network address\n        this.CreateSocketToLocalServer(this.IP, this.Port);\n\n        executorService.execute(()->{\n            try {\n                handleClient(hostPlayer.getSocketToHost().getInputStream(), hostPlayer.getSocketToHost().getOutputStream());\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n        });\n\n\n        while (!this.Stop ) {\n            try{\n                if(this.GuestList.size() < this.MaxGuests) {\n                    Socket guest = this.LocalServer.accept();\n                    this.GuestList.add(guest);\n                    // notify VM_Host\n                    setChanged();\n                    notifyObservers(\"guest connect\");\n                    if (guest.getPort() == hostPlayer.getSocketToHost().getLocalPort()){\n                        System.out.println(\"Host Connected, Number of players: \" + GuestList.size());\n                    }\n                    System.out.println(\"Guest Connected, Number of players: \" + GuestList.size());\n                    executorService.execute(()->{\n                        try {\n                            handleClient(guest.getInputStream(), guest.getOutputStream());\n                        } catch (IOException e) {\n                            throw new RuntimeException(e);\n                        }\n                    });\n                }\n            }catch (IOException e){\n                e.printStackTrace();\n            }\n        }\n    }\n\n    /**\n     * The SendStartGameMessage function is used to send a message to all the guests in the game.\n     * The message contains information about who is hosting, and what tiles they have been assigned.\n     *\n     *\n     * @param  hostNickName Send the host's nickname to all clients\n     *\n     * @return A void, so it does not return anything\n     *\n     * @docauthor Trelent\n     */\n    public void SendStartGameMessage(String hostNickName){\n        // only serverHost\n        int c = 0;\n        for(Socket socket : this.GuestList){\n            try {\n                MessageHandler messageHandler = new MessageHandler();\n                List<Character> StartGameTiles = this.GenerateTiles(8);\n                messageHandler.CreateStartGameMessage(this.CharavterslistToString(StartGameTiles),\n                        hostNickName, c, this.GuestList.size());\n                OutputStream outToClient = socket.getOutputStream();\n                PrintWriter out = new PrintWriter(outToClient);\n                out.println(messageHandler.jsonHandler.toJsonString());\n                out.flush();\n                c++;\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n        }\n    }\n\n    public void sendPassTurnMessage() {\n        MessageHandler messageHandler = new MessageHandler();\n        messageHandler.createPassTurnMessage();\n        for(Socket socket : this.GuestList) {\n\n            try {\n                if (socket.getPort() == this.hostPlayer.getSocketToHost().getLocalPort()){\n                    this.hostPlayer.inputQueue.put(messageHandler.jsonHandler.toJsonString());\n                }\n                else{\n                    OutputStream outToClient = socket.getOutputStream();\n                    PrintWriter out = new PrintWriter(outToClient);\n                    out.println(messageHandler.jsonHandler.toJsonString());\n                    out.flush();\n                }\n            }\n            catch (IOException | InterruptedException e) {throw new RuntimeException(e);}\n        }\n    }\n\n    public void sendEndGame(){\n        MessageHandler messageHandler = new MessageHandler();\n        messageHandler.createEndGameMessage();\n        for(Socket socket : this.GuestList) {\n\n            try {\n                if (socket.getPort() == this.hostPlayer.getSocketToHost().getLocalPort()){\n                    this.hostPlayer.inputQueue.put(messageHandler.jsonHandler.toJsonString());\n                }\n                else{\n                    OutputStream outToClient = socket.getOutputStream();\n                    PrintWriter out = new PrintWriter(outToClient);\n                    out.println(messageHandler.jsonHandler.toJsonString());\n                    out.flush();\n                }\n            }\n            catch (IOException | InterruptedException e) {throw new RuntimeException(e);}\n        }\n    }\n\n    public String CreateMessageToGameServer(String message, String socketSource){\n        // only serverHost\n        MessageHandler messageHandler = new MessageHandler();\n        messageHandler.CreateMessageToGameServer(message, socketSource);\n        return messageHandler.jsonHandler.toJsonString();\n    }\n\n    /**\n     * The SendTryAgainMessage function is used to send a message to the client that they have lost and can try again.\n     *\n     *\n     * @param  destination Identify the player that is being sent a message\n     * @param  prevScore Send the previous score of the player to the server\n     * @param  action Determine the action to be taken by the client\n     * @param  hostNickName Identify the host of the game\n     *\n     * @return A string\n     *\n     * @docauthor Trelent\n     */\n    public String SendTryAgainMessage(String destination, int prevScore, String action, String hostNickName){\n        // only serverHost\n        MessageHandler messageHandler = new MessageHandler();\n        messageHandler.CreateTryAgainMessage(destination, prevScore, action, hostNickName);\n        return messageHandler.jsonHandler.toJsonString();\n    }\n    /**\n     * The SendSuccessMessage function is used to send a success message to the client.\n     *\n     *\n     * @param  destination Determine which client the message is being sent to\n     * @param  newScore Update the score of a player\n     * @param  action Specify the action that was performed by the player\n     * @param  newCurrentTiles Send the new current tiles to the client\n     * @param  hostNickName Identify the host of the game\n     *\n     * @return A string containing a json object\n     *\n     * @docauthor Trelent\n     */\n    public String SendSuccessMessage(String destination, int newScore, String action, String newCurrentTiles, String hostNickName){\n        // only serverHost\n        MessageHandler messageHandler = new MessageHandler();\n        messageHandler.CreateSuccessMessage(destination, newScore, action, newCurrentTiles, hostNickName);\n        return messageHandler.jsonHandler.toJsonString();\n    }\n\n\n    public String SendSucceededChallengeYouMessage(String hostNickName, String prevScore){\n        // only serverHost\n        MessageHandler messageHandler = new MessageHandler();\n        messageHandler.CreateSucceededChallengeYouMessage(hostNickName, prevScore);\n        return messageHandler.jsonHandler.toJsonString();\n    }\n    /**\n     * The SendUpdateBoardMessage function is used to send the updated board state to all of the guests in a game.\n     *\n     *\n     * @param  board Send the board to the client\n     * @param  hostNickName Identify the host of the game\n     *\n     * @return A boolean value\n     *\n     * @docauthor Trelent\n     */\n    public void SendUpdateBoardMessage(String board, String hostNickName){\n        // only serverHost\n        MessageHandler messageHandler = new MessageHandler();\n        messageHandler.CreateUpdateBoardMessage(board, hostNickName);\n        for(Socket socket : this.GuestList){\n            try {\n                OutputStream outToClient = socket.getOutputStream();\n                PrintWriter out = new PrintWriter(outToClient);\n                out.println(messageHandler.jsonHandler.toJsonString());\n                out.flush();\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n        }\n    }\n\n    /**\n     * The handleClient function is the function that handles all of the communication between\n     * the client and server. It reads in a JSON string from the input stream, then puts it into\n     * an input queue for processing by another thread. The handleClient function also writes to\n     * an output stream, which sends data back to the client. This is how we send messages back and forth!\n\n     *\n     * @param  inputStream Read from the server\n     * @param  outputStream Write to the server\n     *\n     * @return Void\n     *\n     * @docauthor Trelent\n     */\n    public void handleClient(InputStream inputStream, OutputStream outputStream) {\n        while (!this.LocalServer.isClosed()) {\n            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));\n            try {\n                String jsonString = bufferedReader.readLine();\n                if (jsonString != null)// Read an object from the server\n                {\n                    try {\n                        inputQueue.put(jsonString); // Put the received object in the queue\n                    } catch (InterruptedException e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n            }  catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n        }\n    }\n\n    /**\n     * The handleRequests function is responsible for handling the requests that are sent to the server.\n     * It takes in a request from the inputQueue and then processes it accordingly.\n\n     *\n     *\n     * @return A void\n     *\n     * @docauthor Trelent\n     */\n    public void handleRequests() {\n        while (!this.LocalServer.isClosed()) {\n            int score = 0;\n            try {\n                String jsonString = inputQueue.take(); //blocking call\n                System.out.println(jsonString);\n                if (jsonString != null) {\n                    JsonObject json = JsonHandler.convertStringToJsonObject(jsonString);\n                    switch (json.get(\"MessageType\").getAsString()){\n                        case \"try place word\":\n                            String q_word = json.get(\"Word\").getAsString();\n                            boolean q_vertical = json.get(\"Vertical\").getAsString().equals(\"true\");\n                            int q_row = Integer.parseInt(json.get(\"Row\").getAsString());\n                            int q_column = Integer.parseInt(json.get(\"Column\").getAsString());\n                            Word Q_word = new Word(getTileArray(q_word), q_row, q_column, q_vertical);\n                            score = this.board.tryPlaceWord(Q_word);\n                            break;\n                        case \"challenge\":\n                            String c_word = json.get(\"Word\").getAsString();\n                            /*boolean c_vertical = json.get(\"Vertical\").getAsString().equals(\"true\");\n                            int c_row = Integer.parseInt(json.get(\"Row\").getAsString());\n                            int c_column = Integer.parseInt(json.get(\"Column\").getAsString());\n                            Word C_word = new Word(getTileArray(c_word), c_row, c_column, c_vertical);*/\n                            StringBuilder stringBuilder = new StringBuilder();\n                            stringBuilder.append(\"C,\");\n                            stringBuilder.append(c_word);\n                            this.SendMessageToGameServer(stringBuilder.toString());\n                            boolean res = this.inputQueueFromGameServer.take().equals(\"true\");\n                            this.HandleChallenge(res, this.currentSuccessMessagePrevScore);\n                            // do the Challenge\n                            break;\n                        case \"update board\":\n                            this.hostPlayer.inputQueue.put(jsonString);\n                            continue;\n                        case \"pass turn\":\n                            this.sendPassTurnMessage();\n                            continue;\n                        case \"end game\":\n                            this.sendEndGame();\n                    }\n\n                    String socketSource = json.get(\"SocketSource\").getAsString();\n                    Socket currentGuest = getSocket(socketSource);// here\n                    PrintWriter out = new PrintWriter(currentGuest.getOutputStream());\n                    if (score == 0){\n                        if(Objects.equals(json.get(\"Source\").getAsString(), this.NickName)){\n                            this.hostPlayer.inputQueue.put(this.SendTryAgainMessage(json.get(\"Source\").getAsString(), 0,\n                                    \"try place word\" , this.NickName));\n                            continue;\n                        }\n                        // ignore to guest Create try again message\n                        out.println(this.SendTryAgainMessage(json.get(\"Source\").getAsString(), 0,\n                                \"try place word\" , this.NickName));\n                        out.flush();\n                    }\n                    else {\n                        // ack , score to guest Create success message\n//                        this.board.placeTile();\n\n                        this.currentSuccessMessageSocket = currentGuest;\n                        this.currentSuccessMessagePrevScore = json.get(\"PrevScore\").getAsString();\n                        String guestCurrentTiles = json.get(\"CurrentTiles\").getAsString();\n                        List<Character> NewCurrentTiles = this.reduceTilesFromCurrentTiles(json.get(\"Word\").getAsString(),\n                                this.ConvertCurrentTilesToList(guestCurrentTiles));\n                        System.out.println(\"New Score to add: \"+score);\n                        String jsonSuccess = this.SendSuccessMessage(json.get(\"Source\").getAsString(), score,\n                                \"try place word\", this.CharavterslistToString(NewCurrentTiles), this.NickName);\n                        if(Objects.equals(json.get(\"Source\").getAsString(), this.NickName)){\n                            this.hostPlayer.inputQueue.put(jsonSuccess);\n                            this.SendUpdateBoardMessage(this.board.parseBoardToString(this.board.getTiles()), this.NickName);\n                            continue;\n                        }\n                        out.println(jsonSuccess);\n                        out.flush();\n                        // notify all\n                        this.SendUpdateBoardMessage(this.board.parseBoardToString(this.board.getTiles()), this.NickName);\n                    }\n                }\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n        }\n    }\n\n    public void HandleChallenge(boolean res , String prevScore){\n        if(res){\n            Character[][] toUpdateBoard = this.hostPlayer.player.prevBoard;\n            this.SendUpdateBoardMessage(this.board.parseCharacterArrayToString(toUpdateBoard), this.NickName);\n            String jsonChallengingYou = this.SendSucceededChallengeYouMessage(this.NickName, prevScore);\n            try {\n                PrintWriter printWriter = new PrintWriter(this.currentSuccessMessageSocket.getOutputStream());\n                printWriter.println(jsonChallengingYou);\n                printWriter.flush();\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n\n        }\n        else{\n            System.out.println(\"Challenge didn't success, the word is legal\");\n        }\n    }\n\n    /**\n     * The SendMessageToGameServer function is used to send a message to the game server.\n     *\n     *\n     * @param  text Send a message to the server\n     *\n     * @return A string\n     *\n     * @docauthor Trelent\n     */\n    public  void SendMessageToGameServer(String text){\n        try {\n            PrintWriter printWriter = new PrintWriter(this.SocketToMyServer.getOutputStream());\n            printWriter.println(text);\n            printWriter.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void handleGameServer(InputStream inputStream, OutputStream outputStream) {\n        while (!this.SocketToMyServer.isClosed()) {\n            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));\n            try {\n                String jsonString = bufferedReader.readLine();\n                if (jsonString != null)// Read an object from the server\n                {\n                    try {\n                        inputQueueFromGameServer.put(jsonString); // Put the received object in the queue\n                    } catch (InterruptedException e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n            }  catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n        }\n    }\n/*\n    public void HandleMessageFromGameServer(){\n        while (!this.SocketToMyServer.isClosed()) {\n            try {\n                String jsonString = inputQueueFromGameServer.take();\n                this.GetMessageFromGameServer(jsonString);\n\n            } catch (InterruptedException e) {\n                throw new RuntimeException(e);\n            }\n        }\n\n    }*/\n\n\n    /**\n     * The GetMessageFromGameServer function is used to get a message from the game server.\n     *\n     *\n     *\n     * @return A string\n     *\n     * @docauthor Trelent\n     */\n    public void GetMessageFromGameServer(String jsonString){\n        System.out.println(jsonString);\n        Future<String> stringFuture = executorService.submit(()->{\n           return jsonString;\n        });\n        this.setStringFuture(stringFuture);\n\n    }\n\n    /**\n     * The SendMessageToLocalServer function is used to send a message to the local server.\n     *\n     *\n     * @param  json Send a message to the server\n     *\n     * @return A jsonhandler object\n     *\n     * @docauthor Trelent\n     */\n    public  void SendMessageToLocalServer(JsonHandler json){\n        writer.println(json.toJsonString());\n\n    }\n\n\n    public Socket getSocket(String source){\n        System.out.println(source);\n        String[] socketSplited = source.split(\":\");\n        String ipSource = socketSplited[0].split(\"/\")[1];\n        String portSource = socketSplited[1];\n        for(Socket s : this.GuestList){\n            if (s.getPort() == Integer.parseInt(portSource)){\n                return s;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * The GeneratePort function generates a random port number between 1024 and 9999.\n     *\n     *\n     *\n     * @return A random port number\n     *\n     * @docauthor Trelent\n     */\n    public int GeneratePort(){\n        int minPort = 1024;\n        int maxPort = 9999;\n\n        int randomPort = generateRandomPort(minPort, maxPort);\n        return randomPort;\n    }\n\n    /**\n     * The generateRandomPort function generates a random port number between the minPort and maxPort values.\n     *\n     *\n     * @param  minPort Set the minimum port number that can be generated\n     * @param  maxPort Set the maximum port number that can be generated\n     *\n     * @return A random number between the minport and maxport parameters\n     *\n     * @docauthor Trelent\n     */\n    public static int generateRandomPort(int minPort, int maxPort) {\n        Random random = new Random();\n        return random.nextInt(maxPort - minPort + 1) + minPort;\n    }\n\n    /**\n     * The reduceTilesFromCurrentTiles function takes in a word and the current tiles of the player.\n     * It then reduces the number of tiles from the currentTiles list by removing all letters that are used to form\n     * a valid word. The function also generates new tiles for each letter removed from currentTiles, so that there are always 7 letters in total.\n\n     *\n     * @param  word Check if the word is valid\n     * @param &lt;Character&gt; currentTiles Store the current tiles that are on the board\n     *\n     * @return The new current tiles after reduce and generate\n     *\n     * @docauthor Trelent\n     */\n    public List<Character> reduceTilesFromCurrentTiles(String word , List<Character> currentTiles){\n        // return New current tiles after reduce and generate\n        int counterUsed = 0;\n        for(int i = 0 ; i < word.length();i++){\n            if(word.charAt(i) != '_'){\n                for(Character t : currentTiles){\n                    if(t == word.charAt(i)){\n                        currentTiles.remove(t);\n                        counterUsed ++;\n                        break;\n                    }\n                }\n            }\n            if(counterUsed == word.length()){\n                break;\n            }\n        }\n        currentTiles.addAll(this.GenerateTiles(counterUsed));\n        return currentTiles;\n    }\n\n    /**\n     * The GenerateTiles function takes in an integer number and returns a list of characters.\n     * The function generates the number of tiles specified by the input parameter, and adds them to a list.\n     *\n     *\n     * @param  number Determine how many tiles the player gets\n     *\n     * @return A list of characters\n     *\n     * @docauthor Trelent\n     */\n    public List<Character> GenerateTiles(int number){\n        List<Character> currentTiles = new ArrayList<>();\n        for(int i = 0 ; i < number ; i++){\n            currentTiles.add(this.bag.getRand().letter);\n            // add End game if bag is empty\n        }\n        return currentTiles;\n    }\n\n    /**\n     * The ConvertCurrentTilesToList function takes in a String of capital letters and converts it into a List of Characters.\n     *\n     *\n     * @param  capitalTiles Store the current tiles that are in the player's hand\n     *\n     * @return A list of characters\n     *\n     * @docauthor Trelent\n     */\n    public List<Character> ConvertCurrentTilesToList(String capitalTiles) {\n        List<Character> currentTiles = new ArrayList<>();\n        for(int i = 0 ; i < capitalTiles.length() ; i++){\n            currentTiles.add(capitalTiles.charAt(i));\n        }\n        return currentTiles;\n    }\n\n    /**\n     * The getTileArray function takes a string and returns an array of Tiles.\n     *\n     *\n     * @param  s Get the tiles from the bag\n     *\n     * @return An array of tile objects\n     *\n     * @docauthor Trelent\n     */\n    private static Tile[] getTileArray(String s) {\n\n        Tile[] ts = new Tile[s.length()];\n        int i = 0;\n        for(char c: s.toCharArray()) {\n            ts[i] = Tile.Bag.getBagModel().getTileForTileArray(c);\n            i++;\n        }\n        return ts;\n    }\n\n    /**\n     * The CharavterslistToString function takes a list of characters and returns a string.\n     *\n     *\n     * @param &lt;Character&gt; characterList Pass the list of characters to the function\n     *\n     * @return A string of the characters in the list\n     *\n     * @docauthor Trelent\n     */\n    public String CharavterslistToString(List<Character> characterList) {\n        StringBuilder sb = new StringBuilder();\n        for (Character c : characterList) {\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n\n\n\n    /**\n     * The close function is used to close the Host's ServerSocket and all of its Guest Sockets.\n     * It also removes this Host from the Main Server's list of active hosts.\n\n     *\n     *\n     * @return A boolean\n     *\n     * @docauthor Trelent\n     */\n    @Override\n    public void close() {\n\n        this.Stop = true;\n        executorService.shutdownNow();\n        for (Socket g : this.GuestList) {\n            try { g.close(); }\n            catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        this.GuestList.clear();\n\n        //Delete this Host from the Main Server HostsList\n\n        if (GameServer != null) {\n            for (Socket host : GameServer.HostsList) {\n                if(host.getPort()==SocketToMyServer.getLocalPort()) {\n                    GameServer.HostsList.remove(host);\n                    break;\n                }\n                }\n            }\n\n\n        if (this.LocalServer != null && !this.LocalServer.isClosed()) {\n            try {\n                this.LocalServer.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            System.out.println(\"Host \"+getNickName()+\" Server closed.\");\n        }\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/model/logic/Host.java b/src/main/java/model/logic/Host.java
--- a/src/main/java/model/logic/Host.java	(revision 537d14922ab5ff5841b76148a35a4be06db1e97b)
+++ b/src/main/java/model/logic/Host.java	(date 1687708946001)
@@ -20,6 +20,8 @@
     boolean Stop;
     Socket currentSuccessMessageSocket;
     String currentSuccessMessagePrevScore;
+    Word currentSuccessMessageWord;
+
 
     final int MaxGuests = 4;
     public List<Socket> GuestList;
@@ -176,7 +178,7 @@
      * @param  HostIp Connect to the local server
      * @param  Port Connect to the local server
     public void createsockettolocalserver(int port) throws ioexception {
-            this
+    this
      *
      * @return A socket
      *
@@ -333,6 +335,25 @@
         MessageHandler messageHandler = new MessageHandler();
         messageHandler.createPassTurnMessage();
         for(Socket socket : this.GuestList) {
+
+            try {
+                if (socket.getPort() == this.hostPlayer.getSocketToHost().getLocalPort()){
+                    this.hostPlayer.inputQueue.put(messageHandler.jsonHandler.toJsonString());
+                }
+                else{
+                    OutputStream outToClient = socket.getOutputStream();
+                    PrintWriter out = new PrintWriter(outToClient);
+                    out.println(messageHandler.jsonHandler.toJsonString());
+                    out.flush();
+                }
+            }
+            catch (IOException | InterruptedException e) {throw new RuntimeException(e);}
+        }
+    }
+    public void sendStopChallengeAlive() {
+        MessageHandler messageHandler = new MessageHandler();
+        messageHandler.createStopChallengeAlive();
+        for(Socket socket : this.GuestList) {
 
             try {
                 if (socket.getPort() == this.hostPlayer.getSocketToHost().getLocalPort()){
@@ -496,6 +517,8 @@
     public void handleRequests() {
         while (!this.LocalServer.isClosed()) {
             int score = 0;
+            boolean flagChallenge = true;
+            Word Q_word = null;
             try {
                 String jsonString = inputQueue.take(); //blocking call
                 System.out.println(jsonString);
@@ -507,21 +530,31 @@
                             boolean q_vertical = json.get("Vertical").getAsString().equals("true");
                             int q_row = Integer.parseInt(json.get("Row").getAsString());
                             int q_column = Integer.parseInt(json.get("Column").getAsString());
-                            Word Q_word = new Word(getTileArray(q_word), q_row, q_column, q_vertical);
+                            Q_word = new Word(getTileArray(q_word), q_row, q_column, q_vertical);
                             score = this.board.tryPlaceWord(Q_word);
                             break;
                         case "challenge":
-                            String c_word = json.get("Word").getAsString();
-                            /*boolean c_vertical = json.get("Vertical").getAsString().equals("true");
-                            int c_row = Integer.parseInt(json.get("Row").getAsString());
-                            int c_column = Integer.parseInt(json.get("Column").getAsString());
-                            Word C_word = new Word(getTileArray(c_word), c_row, c_column, c_vertical);*/
-                            StringBuilder stringBuilder = new StringBuilder();
-                            stringBuilder.append("C,");
-                            stringBuilder.append(c_word);
-                            this.SendMessageToGameServer(stringBuilder.toString());
-                            boolean res = this.inputQueueFromGameServer.take().equals("true");
-                            this.HandleChallenge(res, this.currentSuccessMessagePrevScore);
+                            this.sendStopChallengeAlive();
+                            Thread.sleep(2000);
+
+                            ArrayList<Word> challengeAllTheWords = this.board.getWords(this.currentSuccessMessageWord);
+                            int counterChallenge = 0;
+                            for(Word w : challengeAllTheWords){
+                                StringBuilder stringBuilder = new StringBuilder();
+                                stringBuilder.append("C,");
+                                stringBuilder.append(w);
+                                this.SendMessageToGameServer(stringBuilder.toString());
+                                boolean res = this.inputQueueFromGameServer.take().equals("true");
+                                if(res){
+                                    counterChallenge++;
+                                }
+                            }
+                            if(counterChallenge != challengeAllTheWords.size()){
+                                flagChallenge = false;
+                            }
+                            else{
+                                this.HandleChallenge(true, this.currentSuccessMessagePrevScore);
+                            }
                             // do the Challenge
                             break;
                         case "update board":
@@ -537,6 +570,13 @@
                     String socketSource = json.get("SocketSource").getAsString();
                     Socket currentGuest = getSocket(socketSource);// here
                     PrintWriter out = new PrintWriter(currentGuest.getOutputStream());
+                    if (!flagChallenge){
+                        String tryAgainString = this.SendTryAgainMessage(currentGuest.toString(), 0,
+                                "challenge", this.getNickName());
+                        out.println(tryAgainString);
+                        out.flush();
+                        continue;
+                    }
                     if (score == 0){
                         if(Objects.equals(json.get("Source").getAsString(), this.NickName)){
                             this.hostPlayer.inputQueue.put(this.SendTryAgainMessage(json.get("Source").getAsString(), 0,
@@ -554,6 +594,7 @@
 
                         this.currentSuccessMessageSocket = currentGuest;
                         this.currentSuccessMessagePrevScore = json.get("PrevScore").getAsString();
+                        this.currentSuccessMessageWord = Q_word;
                         String guestCurrentTiles = json.get("CurrentTiles").getAsString();
                         List<Character> NewCurrentTiles = this.reduceTilesFromCurrentTiles(json.get("Word").getAsString(),
                                 this.ConvertCurrentTilesToList(guestCurrentTiles));
@@ -663,7 +704,7 @@
     public void GetMessageFromGameServer(String jsonString){
         System.out.println(jsonString);
         Future<String> stringFuture = executorService.submit(()->{
-           return jsonString;
+            return jsonString;
         });
         this.setStringFuture(stringFuture);
 
@@ -875,8 +916,8 @@
                     GameServer.HostsList.remove(host);
                     break;
                 }
-                }
-            }
+            }
+        }
 
 
         if (this.LocalServer != null && !this.LocalServer.isClosed()) {
@@ -889,4 +930,4 @@
         }
     }
 
-}
+}
\ No newline at end of file
Index: src/main/resources/view/Board-view.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<?import javafx.scene.control.Button?>\n<?import javafx.scene.layout.AnchorPane?>\n<?import javafx.scene.layout.ColumnConstraints?>\n<?import javafx.scene.layout.GridPane?>\n<?import javafx.scene.layout.Pane?>\n<?import javafx.scene.layout.RowConstraints?>\n<?import javafx.scene.text.Font?>\n<?import javafx.scene.text.Text?>\n\n<AnchorPane fx:id=\"anchorPane\" maxHeight=\"-Infinity\" maxWidth=\"-Infinity\" minHeight=\"-Infinity\" minWidth=\"-Infinity\" prefHeight=\"790.0\" prefWidth=\"952.0\" style=\"-fx-background-color: #EDEADE;\" xmlns=\"http://javafx.com/javafx/19\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"view.BoardViewController\">\n   <children>\n      <Button fx:id=\"EndTurn\" layoutX=\"728.0\" layoutY=\"717.0\" mnemonicParsing=\"false\" onAction=\"#EndTurnButtonClick\" prefHeight=\"50.0\" prefWidth=\"68.0\" stylesheets=\"@../css/button.css\" text=\"End Turn\" />\n      <Button fx:id=\"EndGame\" layoutX=\"862.0\" layoutY=\"717.0\" mnemonicParsing=\"false\" onAction=\"#EndGameButtonClick\" prefHeight=\"50.0\" prefWidth=\"77.0\" text=\"End Game\" />\n      <Text layoutX=\"779.0\" layoutY=\"60.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"Score:\" textAlignment=\"CENTER\" wrappingWidth=\"91.00000000000011\">\n         <font>\n            <Font size=\"32.0\" />\n         </font>\n      </Text>\n      <Text layoutX=\"10.0\" layoutY=\"750.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"Tiles:\" textAlignment=\"CENTER\" wrappingWidth=\"84.16746520996094\">\n         <font>\n            <Font size=\"32.0\" />\n         </font>\n      </Text>\n      <Pane layoutX=\"10.0\" layoutY=\"60.0\" prefHeight=\"20.0\" prefWidth=\"20.0\" style=\"-fx-background-color: #0096FF;\" />\n      <Pane layoutX=\"10.0\" layoutY=\"90.0\" prefHeight=\"20.0\" prefWidth=\"20.0\" style=\"-fx-background-color: #E8B828;\" />\n      <Pane layoutX=\"10.0\" layoutY=\"30.0\" prefHeight=\"20.0\" prefWidth=\"20.0\" style=\"-fx-background-color: red;\" />\n      <Pane layoutX=\"10.0\" layoutY=\"120.0\" prefHeight=\"20.0\" prefWidth=\"20.0\" style=\"-fx-background-color: blue;\" />\n      <Text layoutX=\"31.0\" layoutY=\"75.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"X2 Letter\" wrappingWidth=\"63.892091684827506\">\n         <font>\n            <Font size=\"14.0\" />\n         </font>\n      </Text>\n      <Text layoutX=\"31.0\" layoutY=\"45.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"X3 Word\" wrappingWidth=\"59.455723992607545\">\n         <font>\n            <Font size=\"14.0\" />\n         </font>\n      </Text>\n      <Text layoutX=\"31.0\" layoutY=\"106.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"X2 Word\" wrappingWidth=\"55.953369140625\">\n         <font>\n            <Font size=\"14.0\" />\n         </font>\n      </Text>\n      <Text layoutX=\"31.0\" layoutY=\"135.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"X3 Letter\" wrappingWidth=\"65.85350799560547\">\n         <font>\n            <Font size=\"14.0\" />\n         </font>\n      </Text>\n      <AnchorPane id=\"tiles-container\" fx:id=\"tilesContainer\" layoutX=\"100.0\" layoutY=\"710.0\" prefHeight=\"63.0\" prefWidth=\"391.0\">\n         <children>\n            <Button layoutX=\"100.0\" layoutY=\"7.0\" mnemonicParsing=\"false\" onAction=\"#handleTileButtonClick\" prefHeight=\"50.0\" prefWidth=\"40.0\" />\n            <Button layoutX=\"200.0\" layoutY=\"7.0\" mnemonicParsing=\"false\" onAction=\"#handleTileButtonClick\" prefHeight=\"50.0\" prefWidth=\"40.0\" />\n            <Button layoutY=\"7.0\" mnemonicParsing=\"false\" onAction=\"#handleTileButtonClick\" prefHeight=\"50.0\" prefWidth=\"40.0\" />\n            <Button layoutX=\"50.0\" layoutY=\"7.0\" mnemonicParsing=\"false\" onAction=\"#handleTileButtonClick\" prefHeight=\"50.0\" prefWidth=\"40.0\" />\n            <Button layoutX=\"150.0\" layoutY=\"7.0\" mnemonicParsing=\"false\" onAction=\"#handleTileButtonClick\" prefHeight=\"50.0\" prefWidth=\"40.0\" />\n            <Button layoutX=\"350.0\" layoutY=\"7.0\" mnemonicParsing=\"false\" onAction=\"#handleTileButtonClick\" prefHeight=\"50.0\" prefWidth=\"40.0\" />\n            <Button layoutX=\"250.0\" layoutY=\"7.0\" mnemonicParsing=\"false\" onAction=\"#handleTileButtonClick\" prefHeight=\"50.0\" prefWidth=\"40.0\" />\n            <Button layoutX=\"300.0\" layoutY=\"7.0\" mnemonicParsing=\"false\" onAction=\"#handleTileButtonClick\" prefHeight=\"50.0\" prefWidth=\"40.0\" />\n         </children>\n      </AnchorPane>\n      <Text fx:id=\"score\" layoutX=\"870.0\" layoutY=\"60.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" textAlignment=\"CENTER\" wrappingWidth=\"68.0\">\n         <font>\n            <Font size=\"32.0\" />\n         </font>\n      </Text>\n      <Button fx:id=\"TryPlaceWord\" layoutX=\"527.0\" layoutY=\"717.0\" mnemonicParsing=\"false\" onAction=\"#TryPlaceWordButtonClick\" prefHeight=\"50.0\" prefWidth=\"99.0\" text=\"Try place word\" />\n      <Button fx:id=\"resetWord\" layoutX=\"637.0\" layoutY=\"717.0\" mnemonicParsing=\"false\" onAction=\"#resetTilesButtonClick\" prefHeight=\"50.0\" prefWidth=\"80.0\" text=\"Reset word\" />\n      <Text fx:id=\"message\" fill=\"#720000\" layoutX=\"138.0\" layoutY=\"685.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" textAlignment=\"CENTER\" wrappingWidth=\"591.8666076660156\">\n         <font>\n            <Font size=\"21.0\" />\n         </font>\n      </Text>\n      <GridPane fx:id=\"boardGrid\" alignment=\"CENTER\" gridLinesVisible=\"true\" layoutX=\"100.0\" layoutY=\"30.0\" prefHeight=\"606.0\" prefWidth=\"668.0\" style=\"-fx-background-color: #228B22;\">\n         <columnConstraints>\n            <ColumnConstraints percentWidth=\"6.66667\" />\n            <ColumnConstraints percentWidth=\"6.66667\" />\n            <ColumnConstraints percentWidth=\"6.66667\" />\n            <ColumnConstraints percentWidth=\"6.66667\" />\n            <ColumnConstraints percentWidth=\"6.66667\" />\n            <ColumnConstraints percentWidth=\"6.66667\" />\n            <ColumnConstraints percentWidth=\"6.66667\" />\n            <ColumnConstraints percentWidth=\"6.66667\" />\n            <ColumnConstraints percentWidth=\"6.66667\" />\n            <ColumnConstraints percentWidth=\"6.66667\" />\n            <ColumnConstraints percentWidth=\"6.66667\" />\n            <ColumnConstraints percentWidth=\"6.66667\" />\n            <ColumnConstraints percentWidth=\"6.66667\" />\n            <ColumnConstraints percentWidth=\"6.66667\" />\n            <ColumnConstraints percentWidth=\"6.66667\" />\n         </columnConstraints>\n         <rowConstraints>\n            <RowConstraints percentHeight=\"6.66667\" />\n            <RowConstraints percentHeight=\"6.66667\" />\n            <RowConstraints percentHeight=\"6.66667\" />\n            <RowConstraints percentHeight=\"6.66667\" />\n            <RowConstraints percentHeight=\"6.66667\" />\n            <RowConstraints percentHeight=\"6.66667\" />\n            <RowConstraints percentHeight=\"6.66667\" />\n            <RowConstraints percentHeight=\"6.66667\" />\n            <RowConstraints percentHeight=\"6.66667\" />\n            <RowConstraints percentHeight=\"6.66667\" />\n            <RowConstraints percentHeight=\"6.66667\" />\n            <RowConstraints percentHeight=\"6.66667\" />\n            <RowConstraints percentHeight=\"6.66667\" />\n            <RowConstraints percentHeight=\"6.66667\" />\n            <RowConstraints percentHeight=\"6.66667\" />\n         </rowConstraints>\n         <children>\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: red;\" GridPane.columnIndex=\"0\" GridPane.rowIndex=\"0\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: red;\" GridPane.columnIndex=\"0\" GridPane.rowIndex=\"14\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: red;\" GridPane.columnIndex=\"0\" GridPane.rowIndex=\"7\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: red;\" GridPane.columnIndex=\"14\" GridPane.rowIndex=\"0\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: red;\" GridPane.columnIndex=\"14\" GridPane.rowIndex=\"7\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"54.0\" prefWidth=\"65.0\" style=\"-fx-background-color: red;\" GridPane.columnIndex=\"14\" GridPane.rowIndex=\"14\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: red;\" GridPane.columnIndex=\"7\" GridPane.rowIndex=\"0\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: red;\" GridPane.columnIndex=\"7\" GridPane.rowIndex=\"14\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color:  #E8B828;\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"1\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color:  #E8B828;\" GridPane.columnIndex=\"2\" GridPane.rowIndex=\"2\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color:  #E8B828;\" GridPane.columnIndex=\"3\" GridPane.rowIndex=\"3\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color:  #E8B828;\" GridPane.columnIndex=\"4\" GridPane.rowIndex=\"4\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color:  #E8B828;\" GridPane.columnIndex=\"13\" GridPane.rowIndex=\"1\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color:  #E8B828;\" GridPane.columnIndex=\"12\" GridPane.rowIndex=\"2\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color:  #E8B828;\" GridPane.columnIndex=\"11\" GridPane.rowIndex=\"3\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color:  #E8B828;\" GridPane.columnIndex=\"10\" GridPane.rowIndex=\"4\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color:  #E8B828;\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"13\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color:  #E8B828;\" GridPane.columnIndex=\"2\" GridPane.rowIndex=\"12\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color:  #E8B828;\" GridPane.columnIndex=\"3\" GridPane.rowIndex=\"11\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color:  #E8B828;\" GridPane.columnIndex=\"4\" GridPane.rowIndex=\"10\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color:  #E8B828;\" GridPane.columnIndex=\"13\" GridPane.rowIndex=\"13\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color:  #E8B828;\" GridPane.columnIndex=\"12\" GridPane.rowIndex=\"12\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #E8B828;\" GridPane.columnIndex=\"11\" GridPane.rowIndex=\"11\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color:  #E8B828;\" GridPane.columnIndex=\"10\" GridPane.rowIndex=\"10\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"3\" GridPane.rowIndex=\"0\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"11\" GridPane.rowIndex=\"0\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"3\" GridPane.rowIndex=\"14\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"11\" GridPane.rowIndex=\"14\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"0\" GridPane.rowIndex=\"3\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"0\" GridPane.rowIndex=\"11\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"14\" GridPane.rowIndex=\"3\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"14\" GridPane.rowIndex=\"11\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"6\" GridPane.rowIndex=\"2\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"8\" GridPane.rowIndex=\"2\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"2\" GridPane.rowIndex=\"8\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"2\" GridPane.rowIndex=\"6\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"12\" GridPane.rowIndex=\"8\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"12\" GridPane.rowIndex=\"6\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"8\" GridPane.rowIndex=\"12\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"6\" GridPane.rowIndex=\"12\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"7\" GridPane.rowIndex=\"3\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"3\" GridPane.rowIndex=\"7\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"11\" GridPane.rowIndex=\"7\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"7\" GridPane.rowIndex=\"11\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"6\" GridPane.rowIndex=\"8\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"6\" GridPane.rowIndex=\"6\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"8\" GridPane.rowIndex=\"6\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: #0096FF;\" GridPane.columnIndex=\"8\" GridPane.rowIndex=\"8\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: blue;\" GridPane.columnIndex=\"5\" GridPane.rowIndex=\"5\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: blue;\" GridPane.columnIndex=\"9\" GridPane.rowIndex=\"5\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: blue;\" GridPane.columnIndex=\"9\" GridPane.rowIndex=\"9\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: blue;\" GridPane.columnIndex=\"5\" GridPane.rowIndex=\"9\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: blue;\" GridPane.columnIndex=\"5\" GridPane.rowIndex=\"13\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: blue;\" GridPane.columnIndex=\"9\" GridPane.rowIndex=\"13\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: blue;\" GridPane.columnIndex=\"13\" GridPane.rowIndex=\"9\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: blue;\" GridPane.columnIndex=\"13\" GridPane.rowIndex=\"5\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: blue;\" GridPane.columnIndex=\"5\" GridPane.rowIndex=\"1\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: blue;\" GridPane.columnIndex=\"9\" GridPane.rowIndex=\"1\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: blue;\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"5\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: blue;\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"9\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" style=\"-fx-background-color: purple;\" GridPane.columnIndex=\"7\" GridPane.rowIndex=\"7\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"0\" GridPane.rowIndex=\"1\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"0\" GridPane.rowIndex=\"2\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"0\" GridPane.rowIndex=\"4\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"0\" GridPane.rowIndex=\"5\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"0\" GridPane.rowIndex=\"6\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"0\" GridPane.rowIndex=\"8\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"0\" GridPane.rowIndex=\"9\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"0\" GridPane.rowIndex=\"10\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"0\" GridPane.rowIndex=\"12\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"0\" GridPane.rowIndex=\"13\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"0\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"2\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"3\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"4\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"6\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"7\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"8\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"10\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"11\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"12\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"14\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"2\" GridPane.rowIndex=\"0\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"2\" GridPane.rowIndex=\"14\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"2\" GridPane.rowIndex=\"13\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"2\" GridPane.rowIndex=\"11\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"2\" GridPane.rowIndex=\"10\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"2\" GridPane.rowIndex=\"9\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"2\" GridPane.rowIndex=\"7\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"2\" GridPane.rowIndex=\"5\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"2\" GridPane.rowIndex=\"4\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"2\" GridPane.rowIndex=\"3\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"2\" GridPane.rowIndex=\"1\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"3\" GridPane.rowIndex=\"1\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"3\" GridPane.rowIndex=\"2\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"3\" GridPane.rowIndex=\"4\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"3\" GridPane.rowIndex=\"5\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"3\" GridPane.rowIndex=\"6\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"3\" GridPane.rowIndex=\"8\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"3\" GridPane.rowIndex=\"9\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"3\" GridPane.rowIndex=\"10\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"3\" GridPane.rowIndex=\"12\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"3\" GridPane.rowIndex=\"13\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"4\" GridPane.rowIndex=\"0\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"4\" GridPane.rowIndex=\"1\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"4\" GridPane.rowIndex=\"2\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"4\" GridPane.rowIndex=\"3\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"4\" GridPane.rowIndex=\"5\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"4\" GridPane.rowIndex=\"6\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"4\" GridPane.rowIndex=\"7\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"4\" GridPane.rowIndex=\"8\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"4\" GridPane.rowIndex=\"9\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"4\" GridPane.rowIndex=\"11\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"4\" GridPane.rowIndex=\"12\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"4\" GridPane.rowIndex=\"13\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"4\" GridPane.rowIndex=\"14\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"5\" GridPane.rowIndex=\"0\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"5\" GridPane.rowIndex=\"2\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"5\" GridPane.rowIndex=\"14\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"5\" GridPane.rowIndex=\"3\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"5\" GridPane.rowIndex=\"4\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"5\" GridPane.rowIndex=\"6\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"5\" GridPane.rowIndex=\"7\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"5\" GridPane.rowIndex=\"8\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"5\" GridPane.rowIndex=\"10\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"5\" GridPane.rowIndex=\"11\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"5\" GridPane.rowIndex=\"12\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"6\" GridPane.rowIndex=\"0\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"6\" GridPane.rowIndex=\"1\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"6\" GridPane.rowIndex=\"2\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"6\" GridPane.rowIndex=\"4\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"6\" GridPane.rowIndex=\"5\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"6\" GridPane.rowIndex=\"7\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"6\" GridPane.rowIndex=\"9\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"6\" GridPane.rowIndex=\"10\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"6\" GridPane.rowIndex=\"11\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"6\" GridPane.rowIndex=\"13\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"6\" GridPane.rowIndex=\"14\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"7\" GridPane.rowIndex=\"1\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"7\" GridPane.rowIndex=\"2\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"7\" GridPane.rowIndex=\"4\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"7\" GridPane.rowIndex=\"5\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"7\" GridPane.rowIndex=\"6\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"7\" GridPane.rowIndex=\"8\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"7\" GridPane.rowIndex=\"9\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"7\" GridPane.rowIndex=\"10\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"7\" GridPane.rowIndex=\"12\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"7\" GridPane.rowIndex=\"13\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"8\" GridPane.rowIndex=\"0\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"8\" GridPane.rowIndex=\"1\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"8\" GridPane.rowIndex=\"2\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"8\" GridPane.rowIndex=\"4\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"8\" GridPane.rowIndex=\"5\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"8\" GridPane.rowIndex=\"7\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"8\" GridPane.rowIndex=\"9\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"8\" GridPane.rowIndex=\"10\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"8\" GridPane.rowIndex=\"11\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"8\" GridPane.rowIndex=\"13\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"8\" GridPane.rowIndex=\"14\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"9\" GridPane.rowIndex=\"0\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"9\" GridPane.rowIndex=\"2\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"9\" GridPane.rowIndex=\"14\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"9\" GridPane.rowIndex=\"3\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"9\" GridPane.rowIndex=\"4\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"9\" GridPane.rowIndex=\"6\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"9\" GridPane.rowIndex=\"7\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"9\" GridPane.rowIndex=\"8\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"9\" GridPane.rowIndex=\"10\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"9\" GridPane.rowIndex=\"11\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"9\" GridPane.rowIndex=\"12\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"10\" GridPane.rowIndex=\"0\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"10\" GridPane.rowIndex=\"1\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"10\" GridPane.rowIndex=\"2\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"10\" GridPane.rowIndex=\"3\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"10\" GridPane.rowIndex=\"5\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"10\" GridPane.rowIndex=\"6\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"10\" GridPane.rowIndex=\"7\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"10\" GridPane.rowIndex=\"8\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"10\" GridPane.rowIndex=\"9\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"10\" GridPane.rowIndex=\"11\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"10\" GridPane.rowIndex=\"12\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"10\" GridPane.rowIndex=\"13\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"10\" GridPane.rowIndex=\"14\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"11\" GridPane.rowIndex=\"1\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"11\" GridPane.rowIndex=\"2\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"11\" GridPane.rowIndex=\"4\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"11\" GridPane.rowIndex=\"5\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"11\" GridPane.rowIndex=\"6\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"11\" GridPane.rowIndex=\"8\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"11\" GridPane.rowIndex=\"9\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"11\" GridPane.rowIndex=\"10\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"11\" GridPane.rowIndex=\"12\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"11\" GridPane.rowIndex=\"13\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"12\" GridPane.rowIndex=\"0\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"12\" GridPane.rowIndex=\"14\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"12\" GridPane.rowIndex=\"13\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"12\" GridPane.rowIndex=\"11\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"12\" GridPane.rowIndex=\"10\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"12\" GridPane.rowIndex=\"9\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"12\" GridPane.rowIndex=\"7\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"12\" GridPane.rowIndex=\"5\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"12\" GridPane.rowIndex=\"4\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"12\" GridPane.rowIndex=\"3\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"12\" GridPane.rowIndex=\"1\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"13\" GridPane.rowIndex=\"2\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"13\" GridPane.rowIndex=\"3\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"13\" GridPane.rowIndex=\"4\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"13\" GridPane.rowIndex=\"6\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"13\" GridPane.rowIndex=\"7\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"13\" GridPane.rowIndex=\"8\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"13\" GridPane.rowIndex=\"10\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"13\" GridPane.rowIndex=\"11\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"13\" GridPane.rowIndex=\"12\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"13\" GridPane.rowIndex=\"14\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"14\" GridPane.rowIndex=\"1\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"14\" GridPane.rowIndex=\"2\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"14\" GridPane.rowIndex=\"4\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"14\" GridPane.rowIndex=\"5\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"14\" GridPane.rowIndex=\"6\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"14\" GridPane.rowIndex=\"8\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"14\" GridPane.rowIndex=\"9\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"14\" GridPane.rowIndex=\"10\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"14\" GridPane.rowIndex=\"12\" />\n            <Pane onMouseClicked=\"#handlePaneClick\" prefHeight=\"200.0\" prefWidth=\"200.0\" GridPane.columnIndex=\"14\" GridPane.rowIndex=\"13\" />\n\n               </children>\n      </GridPane>\n   </children>\n</AnchorPane>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/view/Board-view.fxml b/src/main/resources/view/Board-view.fxml
--- a/src/main/resources/view/Board-view.fxml	(revision 537d14922ab5ff5841b76148a35a4be06db1e97b)
+++ b/src/main/resources/view/Board-view.fxml	(date 1687704998340)
@@ -9,16 +9,16 @@
 <?import javafx.scene.text.Font?>
 <?import javafx.scene.text.Text?>
 
-<AnchorPane fx:id="anchorPane" maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="790.0" prefWidth="952.0" style="-fx-background-color: #EDEADE;" xmlns="http://javafx.com/javafx/19" xmlns:fx="http://javafx.com/fxml/1" fx:controller="view.BoardViewController">
+<AnchorPane fx:id="anchorPane" maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="650.0" prefWidth="878.0" style="-fx-background-color: #EDEADE;" xmlns="http://javafx.com/javafx/19" xmlns:fx="http://javafx.com/fxml/1" fx:controller="view.BoardViewController">
    <children>
-      <Button fx:id="EndTurn" layoutX="728.0" layoutY="717.0" mnemonicParsing="false" onAction="#EndTurnButtonClick" prefHeight="50.0" prefWidth="68.0" stylesheets="@../css/button.css" text="End Turn" />
-      <Button fx:id="EndGame" layoutX="862.0" layoutY="717.0" mnemonicParsing="false" onAction="#EndGameButtonClick" prefHeight="50.0" prefWidth="77.0" text="End Game" />
-      <Text layoutX="779.0" layoutY="60.0" strokeType="OUTSIDE" strokeWidth="0.0" text="Score:" textAlignment="CENTER" wrappingWidth="91.00000000000011">
+      <Button fx:id="EndTurn" layoutX="703.0" layoutY="591.0" mnemonicParsing="false" onAction="#EndTurnButtonClick" prefHeight="50.0" prefWidth="68.0" stylesheets="@../css/button.css" text="End Turn" />
+      <Button fx:id="EndGame" layoutX="8.0" layoutY="161.0" mnemonicParsing="false" onAction="#EndGameButtonClick" prefHeight="50.0" prefWidth="77.0" text="End Game" />
+      <Text layoutX="713.0" layoutY="59.0" strokeType="OUTSIDE" strokeWidth="0.0" text="Score:" textAlignment="CENTER" wrappingWidth="91.00000000000011">
          <font>
             <Font size="32.0" />
          </font>
       </Text>
-      <Text layoutX="10.0" layoutY="750.0" strokeType="OUTSIDE" strokeWidth="0.0" text="Tiles:" textAlignment="CENTER" wrappingWidth="84.16746520996094">
+      <Text layoutX="10.0" layoutY="624.0" strokeType="OUTSIDE" strokeWidth="0.0" text="Tiles:" textAlignment="CENTER" wrappingWidth="84.16746520996094">
          <font>
             <Font size="32.0" />
          </font>
@@ -47,7 +47,7 @@
             <Font size="14.0" />
          </font>
       </Text>
-      <AnchorPane id="tiles-container" fx:id="tilesContainer" layoutX="100.0" layoutY="710.0" prefHeight="63.0" prefWidth="391.0">
+      <AnchorPane id="tiles-container" fx:id="tilesContainer" layoutX="100.0" layoutY="584.0" prefHeight="63.0" prefWidth="391.0">
          <children>
             <Button layoutX="100.0" layoutY="7.0" mnemonicParsing="false" onAction="#handleTileButtonClick" prefHeight="50.0" prefWidth="40.0" />
             <Button layoutX="200.0" layoutY="7.0" mnemonicParsing="false" onAction="#handleTileButtonClick" prefHeight="50.0" prefWidth="40.0" />
@@ -59,19 +59,19 @@
             <Button layoutX="300.0" layoutY="7.0" mnemonicParsing="false" onAction="#handleTileButtonClick" prefHeight="50.0" prefWidth="40.0" />
          </children>
       </AnchorPane>
-      <Text fx:id="score" layoutX="870.0" layoutY="60.0" strokeType="OUTSIDE" strokeWidth="0.0" textAlignment="CENTER" wrappingWidth="68.0">
+      <Text fx:id="score" layoutX="804.0" layoutY="59.0" strokeType="OUTSIDE" strokeWidth="0.0" textAlignment="CENTER" wrappingWidth="68.0">
          <font>
             <Font size="32.0" />
          </font>
       </Text>
-      <Button fx:id="TryPlaceWord" layoutX="527.0" layoutY="717.0" mnemonicParsing="false" onAction="#TryPlaceWordButtonClick" prefHeight="50.0" prefWidth="99.0" text="Try place word" />
-      <Button fx:id="resetWord" layoutX="637.0" layoutY="717.0" mnemonicParsing="false" onAction="#resetTilesButtonClick" prefHeight="50.0" prefWidth="80.0" text="Reset word" />
-      <Text fx:id="message" fill="#720000" layoutX="138.0" layoutY="685.0" strokeType="OUTSIDE" strokeWidth="0.0" textAlignment="CENTER" wrappingWidth="591.8666076660156">
+      <Button fx:id="TryPlaceWord" layoutX="502.0" layoutY="591.0" mnemonicParsing="false" onAction="#TryPlaceWordButtonClick" prefHeight="50.0" prefWidth="99.0" text="Try place word" />
+      <Button fx:id="resetWord" layoutX="612.0" layoutY="591.0" mnemonicParsing="false" onAction="#resetTilesButtonClick" prefHeight="50.0" prefWidth="80.0" text="Reset word" />
+      <Text fx:id="message" fill="#720000" layoutX="100.0" layoutY="566.0" strokeType="OUTSIDE" strokeWidth="0.0" textAlignment="CENTER" wrappingWidth="600.733154296875">
          <font>
             <Font size="21.0" />
          </font>
       </Text>
-      <GridPane fx:id="boardGrid" alignment="CENTER" gridLinesVisible="true" layoutX="100.0" layoutY="30.0" prefHeight="606.0" prefWidth="668.0" style="-fx-background-color: #228B22;">
+      <GridPane fx:id="boardGrid" alignment="CENTER" gridLinesVisible="true" layoutX="100.0" layoutY="30.0" prefHeight="500.0" prefWidth="600.0" style="-fx-background-color: #228B22;">
          <columnConstraints>
             <ColumnConstraints percentWidth="6.66667" />
             <ColumnConstraints percentWidth="6.66667" />
@@ -311,6 +311,7 @@
             <Pane onMouseClicked="#handlePaneClick" prefHeight="200.0" prefWidth="200.0" GridPane.columnIndex="12" GridPane.rowIndex="4" />
             <Pane onMouseClicked="#handlePaneClick" prefHeight="200.0" prefWidth="200.0" GridPane.columnIndex="12" GridPane.rowIndex="3" />
             <Pane onMouseClicked="#handlePaneClick" prefHeight="200.0" prefWidth="200.0" GridPane.columnIndex="12" GridPane.rowIndex="1" />
+            <Pane onMouseClicked="#handlePaneClick" prefHeight="200.0" prefWidth="200.0" GridPane.columnIndex="13" GridPane.rowIndex="0" />
             <Pane onMouseClicked="#handlePaneClick" prefHeight="200.0" prefWidth="200.0" GridPane.columnIndex="13" GridPane.rowIndex="2" />
             <Pane onMouseClicked="#handlePaneClick" prefHeight="200.0" prefWidth="200.0" GridPane.columnIndex="13" GridPane.rowIndex="3" />
             <Pane onMouseClicked="#handlePaneClick" prefHeight="200.0" prefWidth="200.0" GridPane.columnIndex="13" GridPane.rowIndex="4" />
@@ -334,5 +335,6 @@
 
                </children>
       </GridPane>
+      <Button fx:id="challenge" layoutX="781.0" layoutY="591.0" mnemonicParsing="false" onAction="#challengeButtonClick" prefHeight="50.0" prefWidth="84.0" stylesheets="@../css/button.css" text="Challenge" />
    </children>
-</AnchorPane>
\ No newline at end of file
+</AnchorPane>
